{"meta":{"title":"icccc.cc   -   周瑜.com","subtitle":null,"description":null,"author":"doc2git","url":"http://doc2git.com"},"pages":[{"title":"","date":"2017-12-05T13:21:30.506Z","updated":"2017-12-05T12:16:05.883Z","comments":true,"path":"README.html","permalink":"http://doc2git.com/README.html","excerpt":"","text":"mardowns-testing-of-hexo"},{"title":"category","date":"2017-09-25T16:16:31.000Z","updated":"2017-12-05T12:16:05.887Z","comments":true,"path":"categories/index.html","permalink":"http://doc2git.com/categories/index.html","excerpt":"","text":"Comming Soon …"},{"title":"home","date":"2017-09-25T09:46:32.000Z","updated":"2017-12-05T12:16:05.891Z","comments":true,"path":"home/index.html","permalink":"http://doc2git.com/home/index.html","excerpt":"","text":"home page."},{"title":"我的博客镜像","date":"2017-10-23T05:40:08.000Z","updated":"2017-12-05T12:16:05.895Z","comments":true,"path":"mirrors/index.html","permalink":"http://doc2git.com/mirrors/index.html","excerpt":"","text":"http响应速度投票功能正在路上 。。。 根域名: 码云 (国内): 码市 (国内): github (国外): icccc.cc te.icccc.cc co.icccc.cc hu.icccc.cc ivuex.com te.ivuex.com co.ivuex.com hu.ivuex.com ivuex.club ivuex.gitee.io ivuex.coding.me ivuex.github.io ivuex.com.cn te.ivuex.com.cn co.ivuex.com.cn hu.ivuex.com.cn"},{"title":"tags","date":"2017-09-25T10:23:42.000Z","updated":"2017-12-05T12:16:05.895Z","comments":true,"path":"tags/index.html","permalink":"http://doc2git.com/tags/index.html","excerpt":"","text":""},{"title":"事项列表","date":"2017-11-23T01:33:39.000Z","updated":"2017-12-05T12:16:05.895Z","comments":true,"path":"things/index.html","permalink":"http://doc2git.com/things/index.html","excerpt":"","text":"2017 things: 17.09.28-17.10.05 things: 17.10.09-17.10.15 things: 17.10.16-17.10.22 things: 17.09.18-17.09.24 things: 17.10.23-17.10.29 things: 17.11.20-17.10.26 others: 略."}],"posts":[{"title":"我的博客镜像","slug":"我的博客镜像","date":"2017-12-05T13:21:30.506Z","updated":"2017-12-05T12:16:05.887Z","comments":true,"path":"2017/12/05/我的博客镜像/","link":"","permalink":"http://doc2git.com/2017/12/05/我的博客镜像/","excerpt":"","text":"http响应速度投票功能正在路上 。。。 根域名: 码云 (国内): 码市 (国内): github (国外): icccc.cc te.icccc.cc co.icccc.cc hu.icccc.cc doc2git.com te.doc2git.com co.doc2git.com hu.doc2git.com doc2git.club doc2git.gitee.io doc2git.coding.me doc2git.github.io doc2git.com.cn te.doc2git.com.cn co.doc2git.com.cn hu.doc2git.com.cn","categories":[{"name":"博客","slug":"博客","permalink":"http://doc2git.com/categories/博客/"},{"name":"镜像","slug":"博客/镜像","permalink":"http://doc2git.com/categories/博客/镜像/"}],"tags":[{"name":"博客","slug":"博客","permalink":"http://doc2git.com/tags/博客/"},{"name":"镜像","slug":"镜像","permalink":"http://doc2git.com/tags/镜像/"}]},{"title":"","slug":"newone","date":"2017-12-05T13:21:30.506Z","updated":"2017-12-05T12:16:05.887Z","comments":true,"path":"2017/12/05/newone/","link":"","permalink":"http://doc2git.com/2017/12/05/newone/","excerpt":"","text":"a newone markdown file","categories":[],"tags":[]},{"title":"gitlab攻略","slug":"gitlab攻略","date":"2017-11-27T06:07:50.057Z","updated":"2017-12-05T12:16:05.883Z","comments":true,"path":"2017/11/27/gitlab攻略/","link":"","permalink":"http://doc2git.com/2017/11/27/gitlab攻略/","excerpt":"","text":"gitlab 与普通 nginx 共存的方案：修改gitlab内置的端口，并让 普通nginx反向代理该端口，重点是让出80端口","categories":[],"tags":[]},{"title":"bash 经典读物收藏 - 链群","slug":"bash 经典博文收藏 - 链群","date":"2017-11-24T03:21:53.938Z","updated":"2017-12-05T12:16:05.883Z","comments":true,"path":"2017/11/24/bash 经典博文收藏 - 链群/","link":"","permalink":"http://doc2git.com/2017/11/24/bash 经典博文收藏 - 链群/","excerpt":"","text":"justcoding＠iteye.com：linux shell 字符串操作详解 （长度，读取，替换，截取，连接，对比，删除，位置 , 提到过正则） http://justcoding.iteye.com/blog/1963463","categories":[],"tags":[]},{"title":"mysql","slug":"mysql","date":"2017-11-23T07:38:25.417Z","updated":"2017-12-05T12:16:05.887Z","comments":true,"path":"2017/11/23/mysql/","link":"","permalink":"http://doc2git.com/2017/11/23/mysql/","excerpt":"","text":"ubuntu16 mysql基本安装和配置: https://www.digitalocean.com/community/tutorials/how-to-install-mysql-on-ubuntu-16-04","categories":[],"tags":[]},{"title":"事项列表","slug":"things","date":"2017-11-23T01:33:39.000Z","updated":"2017-12-05T12:16:05.887Z","comments":true,"path":"2017/11/23/things/","link":"","permalink":"http://doc2git.com/2017/11/23/things/","excerpt":"","text":"2017 things: 17.09.28-17.10.05 things: 17.10.09-17.10.15 things: 17.10.16-17.10.22 things: 17.09.18-17.09.24 things: 17.10.23-17.10.29 things: 17.11.20-17.10.26 others: 略.","categories":[],"tags":[]},{"title":"nginx正则，重写，反代，负载均衡 - 优质链群","slug":"nginx正则，重写，反代，负载均衡 - 优质链群","date":"2017-11-20T10:18:27.241Z","updated":"2017-12-05T12:16:05.887Z","comments":true,"path":"2017/11/20/nginx正则，重写，反代，负载均衡 - 优质链群/","link":"","permalink":"http://doc2git.com/2017/11/20/nginx正则，重写，反代，负载均衡 - 优质链群/","excerpt":"","text":"segmentfault： nginx配置location总结及rewrite规则写法： https://segmentfault.com/a/1190000002797606 csdn： http://blog.csdn.net/cyantide/article/details/51003575 51cto：nginx配置url重定向-反向代理：http://lansgg.blog.51cto.com/5675165/1575274 个人博客: Nginx反向代理Google： https://blog.linuxeye.cn/399.html 个人博客: Nginx简单转跳和反向代理： https://hack0nair.me/2014-10-25-how-to-setup-reverse-proxy-by-nginx/","categories":[],"tags":[]},{"title":"things_17.11.20-17.10.26","slug":"things_17.11.20-17.10.26","date":"2017-11-20T09:25:32.000Z","updated":"2017-12-05T12:16:05.887Z","comments":true,"path":"2017/11/20/things_17.11.20-17.10.26/","link":"","permalink":"http://doc2git.com/2017/11/20/things_17.11.20-17.10.26/","excerpt":"","text":"编写并部署 http://zybook.cc 用以serve我和我的大前端小伙伴们的技术查阅需求。","categories":[],"tags":[]},{"title":"git操作 - 链群","slug":"git操作 - 链群","date":"2017-11-17T02:11:20.767Z","updated":"2017-12-05T12:16:05.883Z","comments":true,"path":"2017/11/17/git操作 - 链群/","link":"","permalink":"http://doc2git.com/2017/11/17/git操作 - 链群/","excerpt":"","text":"On linux, Generating a new SSH key and adding it to the ssh-agent: https://help.github.com/articles/generating-a-new-ssh-key-and-adding-it-to-the-ssh-agent/ On window, Generating a new SSH key and adding it to the ssh-agent: https://help.github.com/articles/generating-a-new-ssh-key-and-adding-it-to-the-ssh-agent/#platform-windows","categories":[],"tags":[]},{"title":"JS快速查询元素盒子模型的方法介绍链群","slug":"JS快速查询元素盒子模型的方法介绍链群","date":"2017-11-15T20:33:07.638Z","updated":"2017-12-05T12:16:05.883Z","comments":true,"path":"2017/11/16/JS快速查询元素盒子模型的方法介绍链群/","link":"","permalink":"http://doc2git.com/2017/11/16/JS快速查询元素盒子模型的方法介绍链群/","excerpt":"","text":"张鑫旭 - CSSOM视图模式(CSSOM View Module)相关整理 : http://www.zhangxinxu.com/wordpress/2011/09/cssom%E8%A7%86%E5%9B%BE%E6%A8%A1%E5%BC%8Fcssom-view-module%E7%9B%B8%E5%85%B3%E6%95%B4%E7%90%86%E4%B8%8E%E4%BB%8B%E7%BB%8D/ develop.mozzila.org - Element.getBoundingClientRect() : https://developer.mozilla.org/zh-CN/docs/Web/API/Element/getBoundingClientRect","categories":[],"tags":[]},{"title":"vscode优质插件链群","slug":"vscode优质插件链群","date":"2017-11-13T20:07:37.996Z","updated":"2017-12-05T12:16:05.887Z","comments":true,"path":"2017/11/14/vscode优质插件链群/","link":"","permalink":"http://doc2git.com/2017/11/14/vscode优质插件链群/","excerpt":"","text":"VSCode拓展插件推荐（HTML、Node、Vue、React开发均适用）: https://github.com/varHarrie/Dawn-Blossoms/issues/10","categories":[],"tags":[]},{"title":"vue配套资源汇总","slug":"vue配套资源汇总","date":"2017-11-11T12:01:28.000Z","updated":"2017-12-05T12:16:05.887Z","comments":true,"path":"2017/11/11/vue配套资源汇总/","link":"","permalink":"http://doc2git.com/2017/11/11/vue配套资源汇总/","excerpt":"","text":"mirror: https://github.com/doc2git/awesome-github-vuemirror: https://github.com/opendigg/awesome-github-vue","categories":[],"tags":[]},{"title":"vue编码训诫","slug":"vue编码训诫","date":"2017-11-09T20:06:45.414Z","updated":"2017-12-05T12:16:05.887Z","comments":true,"path":"2017/11/10/vue编码训诫/","link":"","permalink":"http://doc2git.com/2017/11/10/vue编码训诫/","excerpt":"","text":"单向数据流 Prop 是单向绑定的：当父组件的属性变化时，将传导给子组件，但是反过来不会。这是为了防止子组件无意间修改了父组件的状态，来避免应用的数据流变得难以理解。另外，每次父组件更新时，子组件的所有 prop 都会更新为最新值。这意味着你不应该在子组件内部改变 prop。如果你这么做了，Vue 会在控制台给出警告。在两种情况下，我们很容易忍不住想去修改 prop 中数据：Prop 作为初始值传入后，子组件想把它当作局部数据来用；Prop 作为原始数据传入，由子组件处理成其它数据输出。对这两种情况，正确的应对方式是：定义一个局部变量，并用 prop 的值初始化它： 12345678910111213 props: [&apos;initialCounter&apos;], data: function () &#123; return &#123; counter: this.initialCounter &#125; &#125;// 定义一个计算属性，处理 prop 的值并返回： props: [&apos;size&apos;], computed: &#123; normalizedSize: function () &#123; return this.size.trim().toLowerCase() &#125; &#125; 注意在 JavaScript 中对象和数组是引用类型，指向同一个内存空间，如果 prop 是一个对象或数组，在子组件内部改变它会影响父组件的状态。","categories":[],"tags":[]},{"title":"前端创意来源","slug":"前端创意来源","date":"2017-11-08T12:12:21.000Z","updated":"2017-12-05T12:16:05.887Z","comments":true,"path":"2017/11/08/前端创意来源/","link":"","permalink":"http://doc2git.com/2017/11/08/前端创意来源/","excerpt":"","text":"易企秀：http://www.eqxiu.com/ 兔展：http://www.rabbitpre.com/","categories":[],"tags":[]},{"title":"UI组件及其效率工具集合","slug":"UI组件及其效率工具集合","date":"2017-11-08T07:41:57.000Z","updated":"2017-12-05T12:16:05.883Z","comments":true,"path":"2017/11/08/UI组件及其效率工具集合/","link":"","permalink":"http://doc2git.com/2017/11/08/UI组件及其效率工具集合/","excerpt":"","text":"intellij-bootstrap(bootstrap模板生成插件 based on webstom)： https://github.com/bodiam/intellij-bootstrap iview ui: 视频 https://www.iviewui.com/live 组件 https://www.iviewui.com/docs/guide/install 布局 https://www.iviewui.com/docs/guide/layout","categories":[],"tags":[]},{"title":"express链群","slug":"Express结合Webpack的全栈自动刷新","date":"2017-11-07T11:27:42.000Z","updated":"2017-12-05T12:16:05.883Z","comments":true,"path":"2017/11/07/Express结合Webpack的全栈自动刷新/","link":"","permalink":"http://doc2git.com/2017/11/07/Express结合Webpack的全栈自动刷新/","excerpt":"","text":"express结合Webpack的全栈自动刷新: https://segmentfault.com/a/1190000004505747","categories":[],"tags":[]},{"title":"代码测试框架和断言库","slug":"代码测试框架和断言库","date":"2017-11-07T06:41:26.000Z","updated":"2017-12-05T12:16:05.887Z","comments":true,"path":"2017/11/07/代码测试框架和断言库/","link":"","permalink":"http://doc2git.com/2017/11/07/代码测试框架和断言库/","excerpt":"","text":"阮一峰 : 测试框架 Mocha 实例教程: http://www.ruanyifeng.com/blog/2015/12/a-mocha-tutorial-of-examples.html 用到的断言库： chai ;","categories":[],"tags":[]},{"title":"vue文档语录","slug":"vue文档语录","date":"2017-11-06T18:14:50.581Z","updated":"2017-12-05T12:16:05.887Z","comments":true,"path":"2017/11/07/vue文档语录/","link":"","permalink":"http://doc2git.com/2017/11/07/vue文档语录/","excerpt":"","text":"Vue 2.0Vue 实例创建一个-Vue-的实例 每个 Vue 应用都是通过 Vue 函数创建一个新的 Vue 实例开始的； 虽然没有完全遵循 MVVM 模型，Vue 的设计无疑受到了它的启发。 因此在文档中经常会使用 vm (ViewModel 的简称) 这个变量名表示 Vue 实例。 当创建一个 Vue 实例时，你可以传入一个选项对象。 作为参考，你也可以在 API 文档 中浏览完整的选项列表。 一个 Vue 应用由一个通过 new Vue 创建的根 Vue 实例， 以及可选的嵌套的、可复用的组件树组成。 数据与方法 当一个 Vue 实例被创建时， 它向 Vue 的响应式系统中加入了其 data 对象中能找到的所有的属性。 当这些属性的值发生改变时， 视图将会产生“响应”，即匹配更新为新的值。 只有当实例被创建时 data 中存在的属性是响应式的。 那么对 b 的改动将不会触发任何视图的更新。 如果你知道你会在晚些时候需要一个属性， 但是一开始它为空或不存在， 那么你仅需要设置一些初始值。 除了 data 属性， Vue 实例暴露了一些有用的实例属性与方法。 它们都有前缀 $， 以便与用户定义的属性区分开来。 在未来，你可以在 API 参考查阅到完整的实例属性和方法的列表。 实例生命周期 每个 Vue 实例在被创建之前都要经过一系列的初始化过程。 例如需要设置数据监听、编译模板、挂载实例到 DOM、在数据变化时更新 DOM 等。 同时在这个过程中也会运行一些叫做生命周期钩子的函数， 给予用户机会在一些特定的场景下添加他们自己的代码。 ‘比如 created 钩子可以用来在一个实例被创建之后执行代码;’ 也有一些其它的钩子， 在实例生命周期的不同场景下调用， 如 mounted、updated、destroyed。钩子的 this 指向调用它的 Vue 实例。 不要在选项属性或回调上使用箭头函数； 因为箭头函数是和父级上下文绑定在一起的， this 不会是如你所预期的 Vue 实例， 经常导致 Uncaught TypeError: Cannot read property of undefined, 或 Uncaught TypeError: this.myMethod is not a function 之类的错误。 生命周期图示 下图说明了实例的生命周期。 你不需要立马弄明白所有的东西， 不过随着你的不断学习和使用， 它的参考价值会越来越高。 模板语法 Vue.js 使用了基于 HTML 的模板语法， 允许开发者声明式地将 DOM 绑定至底层 Vue 实例的数据。 所有 Vue.js 的模板都是合法的 HTML ， 所以能被遵循规范的浏览器和 HTML 解析器解析。 在底层的实现上， Vue 将模板编译成虚拟 DOM 渲染函数。 结合响应系统，在应用状态改变时， Vue 能够智能地计算出重新渲染组件的最小代价并应用到 DOM 操作上。 如果你熟悉虚拟 DOM 并且偏爱 JavaScript 的原始力量， 你也可以不用模板， 直接写渲染 (render) 函数， 使用可选的 JSX 语法。 插值文本 数据绑定最常见的形式就是使用“Mustache”语法 (双大括号) 的文本插值; Mustache 标签将会被替代为对应数据对象上 msg 属性的值。 无论何时， 绑定的数据对象上 msg 属性发生了改变， 插值处的内容都会更新。 通过使用 v-once 指令， 你也能执行一次性地插值， 当数据改变时，插值处的内容不会更新。 但请留心这会影响到该节点上所有的数据绑定: 这个将不会改变: 计算属性和观察者计算属性 模板内的表达式非常便利， 但是设计它们的初衷是用于简单运算的。 在模板中放入太多的逻辑会让模板过重且难以维护, 如：1&lt;div id=&quot;example&quot;&gt; &#123;&#123; message.split(&apos;&apos;).reverse().join(&apos;&apos;) &#125;&#125; &lt;/div&gt; 在这个地方，模板不再是简单的声明式逻辑。 你必须看一段时间才能意识到， 这里是想要显示变量 message 的翻转字符串。 当你想要在模板中多次引用此处的翻转字符串时，就会更加难以处理。 所以，’对于任何复杂逻辑，你都应当使用计算属性。’ 基础例子 计算属性缓存 vs 方法 计算属性 vs 侦听属性 计算属性的 setter 侦听器 虽然计算属性在大多数情况下更合适， 但有时也需要一个自定义的侦听器。 这就是为什么 Vue 通过 watch选项提供了一个更通用的方法，来响应数据的变化。 当需要在数据变化时执行异步或开销较大的操作时，这个方式是最有用的。 watch 选项允许我们执行异步操作 (访问一个 API)， 限制我们执行该操作的频率， 并在我们得到最终结果前，设置中间状态。 这些都是计算属性无法做到的。 除了 watch 选项之外，您还可以使用命令式的 vm.$watch API。 Class 与 Style 绑定 操作元素的 class 列表和内联样式是数据绑定的一个常见需求。 因为它们都是属性，所以我们可以用 v-bind 处理它们： 只需要通过表达式计算出字符串结果即可。 不过，字符串拼接麻烦且易错。 因此，在将 v-bind 用于 class 和 style 时，Vue.js 做了专门的增强。 表达式结果的类型除了字符串之外，还可以是对象或数组。 绑定 HTML Class #对象语法 我们可以传给 v-bind:class 一个对象，以动态地切换 class; 上面的语法表示 active 这个 class 存在与否将取决于数据属性 isActive 的 truthiness。 你可以在对象中传入更多属性来动态切换多个 class， 此外，v-bind:class 指令也可以与普通的 class 属性共存。 绑定的数据对象不必内联定义在模板里; 渲染的结果和上面一样。 ‘我们也可以在这里绑定一个返回对象的计算属性,这是一个常用且强大的模式’; #数组语法 我们可以把一个数组传给 v-bind:class，以应用一个 class 列表; 如果你也想根据条件切换列表中的 class，可以用三元表达式; 不过，当有多个条件 class 时这样写有些繁琐。 所以在数组语法中也可以使用对象语法; #用在组件上 ‘当在一个自定义组件上使用 class 属性时，’ ‘这些类将被添加到根元素上面。’ ‘这个元素上已经存在的类不会被覆盖。’ ‘对于带数据绑定 class 也同样适用; ‘ 绑定内联样式#对象语法 v-bind:style 的对象语法十分直观——看着非常像 CSS， 但其实是一个 JavaScript 对象。 CSS 属性名可以用驼峰式 (camelCase) 或短横线分隔 (kebab-case，记得用单引号括起来) 来命名; 直接绑定到一个样式对象通常更好，这会让模板更清晰; 同样的，对象语法常常结合返回对象的计算属性使用。#数组语法 v-bind:style 的数组语法可以将多个样式对象应用到同一个元素上;#自动添加前缀 当 v-bind:style 使用需要添加浏览器引擎前缀的 CSS 属性时，如 transform，Vue.js 会自动侦测并添加相应的前缀。#多重值 从 2.3.0 起你可以为 style 绑定中的属性提供一个包含多个值的数组， 常用于提供多个带前缀的值; 条件渲染v-if在-lt-template-gt-元素上使用-v-if-条件渲染分组 因为 v-if 是一个指令，所以必须将它添加到一个元素上。 但是如果想切换多个元素呢？ 此时可以把一个 元素当做不可见的包裹元素，并在上面使用 v-if。 最终的渲染结果将不包含 元素。v-else 可以使用 v-else 指令来表示 v-if 的“else 块”; v-else 元素必须紧跟在带 v-if 或者 v-else-if 的元素的后面，否则它将不会被识别。v-else-if 2.1.0 新增 v-else-if，顾名思义，充当 v-if 的“else-if 块”，可以连续使用; 类似于 v-else，v-else-if 也必须紧跟在带 v-if 或者 v-else-if 的元素之后。 用key管理可复用的元素 Vue 会尽可能高效地渲染元素，通常会复用已有元素而不是从头开始渲染。 这么做除了使 Vue 变得非常快之外，还有其它一些好处: (局部更新DOM)[笔者注]。 这样也不总是符合实际需求， 所以 Vue 为你提供了一种方式来表达”这两个元素是完全独立的，不要复用它们”(递归替换key属性所在的元素)[笔者注]。 只需添加一个具有唯一值的 key 属性即可, 每次切换时，输入框都将被重新渲染。 v-show 另一个用于根据条件展示元素的选项是 v-show 指令。 不同的是带有 v-show 的元素始终会被渲染并保留在 DOM 中。 v-show 只是简单地切换元素的 CSS 属性 display。 ‘注意，v-show 不支持 元素，也不支持 v-else’。 v-if vs v-show v-if 是“真正”的条件渲染， 因为它会确保在切换过程中条件块内的事件监听器和子组件适当地被销毁和重建。 v-if 也是惰性的：如果在初始渲染时条件为假， 则什么也不做——直到条件第一次变为真时， 才会开始渲染条件块。 相比之下，v-show 就简单得多——不管初始条件是什么， 元素总是会被渲染， 并且只是简单地基于 CSS 进行切换。 一般来说， v-if 有更高的切换开销， 而 v-show 有更高的初始渲染开销。 因此， 如果需要非常频繁地切换， 则使用 v-show 较好； 如果在运行时条件很少改变， 则使用 v-if 较好。 v-if与v-for-一起使用 当 v-if 与 v-for 一起使用时， v-for 具有比 v-if 更高的优先级。 列表渲染用v-for把一个数组对应为一组元素 我们用 v-for 指令根据一组数组的选项列表进行渲染。 v-for 指令需要使用 item in items 形式的特殊语法， items 是源数据数组并且 item 是数组元素迭代的别名。 在 v-for 块中， 我们拥有对父作用域属性的完全访问权限。 v-for 还支持一个可选的第二个参数为当前项的索引。 (实战中编译时可能出错,建议不用of,只用in)[笔者注]你也可以用 of 替代 in 作为分隔符，因为它是最接近 JavaScript 迭代器的语法; 一个对象的-v-for 你也可以用 v-for 通过一个对象的属性来迭代。 也可以提供第二个的参数为键名 第三个参数为索引 在遍历对象时，是按 Object.keys() 的结果遍历，但是不能保证它的结果在不同的 JavaScript 引擎下是一致的。 key 当 Vue.js 用 v-for 正在更新已渲染过的元素列表时， 它默认用“就地复用”策略。 如果数据项的顺序被改变， Vue 将不会移动 DOM 元素来匹配数据项的顺序， 而是简单复用此处每个元素， 并且确保它在特定索引下显示已被渲染过的每个元素。 这个类似 Vue 1.x 的 track-by=”$index” 。 这个默认的模式是高效的， 但是只适用于不依赖子组件状态或临时 DOM 状态 (例如：表单输入值) 的列表渲染输出。 为了给 Vue 一个提示， 以便它能跟踪每个节点的身份， 从而重用和重新排序现有元素，你需要为每项提供一个唯一 key 属性。 理想的 key 值是每项都有的且唯一的 id。 这个特殊的属性相当于 Vue 1.x 的 track-by ， 但它的工作方式类似于一个属性， 所以你需要用 v-bind 来绑定动态值 (在这里使用简写); 建议尽可能在使用 v-for 时提供 key， 除非遍历输出的 DOM 内容非常简单， 或者是刻意依赖默认行为以获取性能上的提升。 因为它是 Vue 识别节点的一个通用机制， key 并不与 v-for 特别关联， key 还具有其他用途， 我们将在后面的指南中看到其他用途。 数组更新检测变异方法 Vue 包含一组观察数组的变异方法，所以它们也将会触发视图更新。这些方法如下： push() pop() shift() unshift() splice() sort() reverse() 替换数组 变异方法 (mutation method)， 顾名思义，会改变被这些方法调用的原始数组。 相比之下，也有非变异 (non-mutating method) 方法， 例如：filter(), concat() 和 slice() 。 这些不会改变原始数组，但总是返回一个新数组。 当使用非变异方法时，可以用新数组替换旧数组(覆盖式赋值)[笔者注]； 注意事项 由于 JavaScript 的限制，Vue 不能检测以下变动的数组： 当你利用索引直接设置一个项时，例如：vm.items[indexOfItem] = newValue 当你修改数组的长度时，例如：vm.items.length = newLength 为了解决第一类问题， 以下两种方式都可以实现和 vm.items[indexOfItem] = newValue 相同的效果， 同时也将触发状态更新: eg 1: 12// Vue.set Vue.set(example1.items, indexOfItem, newValue) - eg 2: 12// Array.prototype.spliceexample1.items.splice(indexOfItem, 1, newValue) 为了解决第二类问题，可以使用 splice：1example1.items.splice(newLength); 对象更改检测注意事项 还是由于 JavaScript 的限制，Vue 不能检测对象属性的添加或删除; 对于已经创建的实例，Vue 不能动态添加根级别的响应式属性。 但是，可以使用 Vue.set(object, key, value) 方法向嵌套对象添加响应式属性。 你还可以使用 vm.$set 实例方法，它只是全局 Vue.set 的别名; 有时你可能需要为已有对象赋予多个新属性， 比如使用 Object.assign() 或 _.extend()。 在这种情况下，你应该用两个对象的属性创建一个新的对象。 你应该这样做：1234this.userProfile = Object.assign(&#123;&#125;, this.userProfile, &#123; age: 27, favoriteColor: &apos;Vue Green&apos;&#125;) 显示过滤/排序结果 有时，我们想要显示一个数组的过滤或排序副本， 而不实际改变或重置原始数据。 在这种情况下，可以创建返回过滤或排序数组的计算属性。 在计算属性不适用的情况下 (例如，在嵌套 v-for 循环中) 你可以使用一个 method 方法;一段取值范围的v-for v-for 也可以取整数。在这种情况下，它将重复多次模板。v-for on a 类似于 v-if，你也可以利用带有 v-for 的 渲染多个元素。v-for with v-if 当它们处于同一节点，v-for 的优先级比 v-if 更高， 这意味着 v-if 将分别重复运行于每个 v-for 循环中。 当你想为仅有的一些项渲染节点时， 这种优先级的机制会十分有用; 而如果你的目的是有条件地跳过循环的执行， 那么可以将 v-if 置于外层元素 (或 )上。 一个组件的v-for 在自定义组件里， 你可以像任何普通元素一样用 v-for 。 然而，任何数据都不会被自动传递到组件里， 因为组件有自己独立的作用域。 为了把迭代数据传递到组件里， 我们要用 props; 不自动将 item 注入到组件里的原因是， 这会使得组件与 v-for 的运作紧密耦合。 明确组件数据的来源能够使组件在其他场合重复使用。 下面是一个简单的 todo list 的完整例子：12345678910111213141516 &lt;div id=&quot;todo-list-example&quot;&gt; &lt;input v-model=&quot;newTodoText&quot; v-on:keyup.enter=&quot;addNewTodo&quot; placeholder=&quot;Add a todo&quot; &gt; &lt;ul&gt; &lt;li is=&quot;todo-item&quot; v-for=&quot;(todo, index) in todos&quot; v-bind:key=&quot;todo.id&quot; v-bind:title=&quot;todo.title&quot; v-on:remove=&quot;todos.splice(index, 1)&quot; &gt;&lt;/li&gt; &lt;/ul&gt;&lt;/div&gt; 注意这里的 is=”todo-item” 属性。这种做法在使用 DOM 模板时是十分必要的，因为在 元素内只有 元素会被看作有效内容。这样做实现的效果与 相同，但是可以避开一些潜在的浏览器解析错误。查看 DOM 模板解析 说明 来了解更多信息。 事件处理监听事件 可以用 v-on 指令监听 DOM 事件来触发一些 JavaScript 代码。 方法事件处理器 许多事件处理的逻辑都很复杂，所以直接把 JavaScript 代码写在 v-on 指令中是不可行的。因此 v-on 可以接收一个定义的方法来调用。 内联处理器里的方法 除了直接绑定到一个方法，也可以用内联 JavaScript 语句:1&lt;button v-on:click=&quot;say(&apos;hi&apos;)&quot;&gt;Say hi&lt;/button&gt; 有时也需要在内联语句处理器中访问原生 DOM 事件。可以用特殊变量 $event 把它传入方法, eg:12345678910111213// template&lt;button v-on:click=&quot;warn(&apos;Form cannot be submitted yet.&apos;, $event)&quot;&gt; Submit&lt;/button&gt;// ...methods: &#123; warn: function (message, event) &#123; // 现在我们可以访问原生事件对象 if (event) event.preventDefault() alert(message) &#125;&#125; 事件修饰符 在事件处理程序中调用 event.preventDefault() 或 event.stopPropagation() 是非常常见的需求。尽管我们可以在 methods 中轻松实现这点，但更好的方式是：methods 只有纯粹的数据逻辑，而不是去处理 DOM 事件细节。 为了解决这个问题，Vue.js 为 v-on 提供了事件修饰符。通过由点 (.) 表示的指令后缀来调用修饰符。 .stop.prevent.capture.self.once","categories":[],"tags":[]},{"title":"nodejs优质文档","slug":"nodejs优质文档链群","date":"2017-11-04T06:09:52.000Z","updated":"2017-12-05T12:16:05.887Z","comments":true,"path":"2017/11/04/nodejs优质文档链群/","link":"","permalink":"http://doc2git.com/2017/11/04/nodejs优质文档链群/","excerpt":"","text":"ngdeng - 七天学会NodeJS: http://nqdeng.github.io/7-days-nodejs/","categories":[],"tags":[]},{"title":"Plan-todo-2017.11-week1","slug":"things_17.9.28-17.10.5","date":"2017-11-01T08:32:58.690Z","updated":"2017-12-05T12:16:05.887Z","comments":true,"path":"2017/11/01/things_17.9.28-17.10.5/","link":"","permalink":"http://doc2git.com/2017/11/01/things_17.9.28-17.10.5/","excerpt":"","text":"用vue写商城的左边栏和对应的弹出框+ todo: - 这个大部分商城都有,很经典. + 要写的组件: + 左边栏组件 - 边栏的子行组件 + 弹出块组件 - 弹出块子组件(1-3个) - 弹出块右边栏组件 + 预估： - 看起要做东西很多,但是按上述列表分解来看，其实也没什么； + 目标： - 写得抽象些，考虑全面些,以后写类似的商城模块，就直接用这个vue组件来改，或者生成; + 宣言： - 功夫其实没什么好说的，不过一横一竖罢了，成品，在心中，在编辑器里, 在git仓库里;","categories":[],"tags":[]},{"title":"css陌生实用属性收集","slug":"css陌生实用属性收集","date":"2017-10-31T05:02:07.987Z","updated":"2017-12-05T12:16:05.883Z","comments":true,"path":"2017/10/31/css陌生实用属性收集/","link":"","permalink":"http://doc2git.com/2017/10/31/css陌生实用属性收集/","excerpt":"","text":"writing-mode： http://www.zhangxinxu.com/wordpress/2016/04/css-writing-mode/","categories":[],"tags":[]},{"title":"语言翻译类api","slug":"语言翻译类api","date":"2017-10-28T13:40:39.000Z","updated":"2017-12-05T12:16:05.887Z","comments":true,"path":"2017/10/28/语言翻译类api/","link":"","permalink":"http://doc2git.com/2017/10/28/语言翻译类api/","excerpt":"","text":"微软翻译： https://datamarket.azure.com/account 翻译服务端开源项目:npm i translategithub: https://github.com/StephanHoyer/translate.js","categories":[],"tags":[]},{"title":"Todo-2017.10-week5","slug":"things_17.10.23-17.10.29","date":"2017-10-28T13:23:26.000Z","updated":"2017-12-05T12:16:05.887Z","comments":true,"path":"2017/10/28/things_17.10.23-17.10.29/","link":"","permalink":"http://doc2git.com/2017/10/28/things_17.10.23-17.10.29/","excerpt":"","text":"","categories":[],"tags":[]},{"title":"html中的字符特殊字符转义","slug":"html中的字符特殊字符转义","date":"2017-10-27T19:50:25.259Z","updated":"2017-12-05T12:16:05.883Z","comments":true,"path":"2017/10/28/html中的字符特殊字符转义/","link":"","permalink":"http://doc2git.com/2017/10/28/html中的字符特殊字符转义/","excerpt":"","text":"html中的字符特殊字符转义对照大全： https://dev.w3.org/html5/html-author/charref","categories":[],"tags":[]},{"title":"vue和vuex中各概念细微差别备忘板","slug":"vue和vuex中各概念细微差别备忘板","date":"2017-10-26T18:56:56.376Z","updated":"2017-12-05T12:16:05.887Z","comments":true,"path":"2017/10/27/vue和vuex中各概念细微差别备忘板/","link":"","permalink":"http://doc2git.com/2017/10/27/vue和vuex中各概念细微差别备忘板/","excerpt":"","text":"vue实例： 缓存，更新 - data 属性对象中定义的属性值会被缓存,不会随依赖变量变化而计算更新； - computed 属性对象中定义的属性值会被缓存,会随依赖变量变化而计算更新； - filter 属性对象中定义的属性值不会被缓存,会随依赖变量变化而计算更新； + watch 属性对象中定义的属性值不会被缓存, - 会随在属性名&apos;a&apos;所对应的实例属性this[&apos;a&apos;]之变化时， - 执行watch中定义的&apos;a&apos;属性标示的函数； vuex实例中的概念： state 单一状态树 + Vuex 通过 store 选项， - &apos;提供了一种机制将状态从根组件“注入”到每一个子组件中（需调用 Vue.use(Vuex)）&apos;; + 通过在根实例中注册 store 选项， - 该 store实例会注入到根组件下的所有子组件中， - 且子组件能通过 this.$store 访问到。; - 当一个组件需要获取多个状态时候， - 将这些状态都声明为计算属性会有些重复和冗余。 - 为了解决这个问题， - &apos;可以使用 mapState 辅助函数帮助我们生成计算属性&apos;; - 当映射的计算属性的名称与 state 的子节点名称相同时， - 我们也可以给 mapState 传一个字符串数组。 getter - 有时候我们需要从 store 中的 state 中派生出一些状态; + 如果有多个组件需要用到此属性， - 我们要么复制这个函数， - 或者抽取到一个共享函数然后在多处导入它, - 无论哪种方式都不是很理想; + Vuex 允许我们在 store 中定义“getter” - &apos;可以认为getter是 store 的计算属性&apos;, - 就像计算属性一样; - getter的返回值会根据它的依赖被缓存起来， - 而且且只有当它的依赖值发生了改变才会被重新计算; - Getter 接受 state 作为其第一个参数; - Getter 会暴露为 store.getters 对象; - Getter 也可以接受其他 getter 作为第二个参数; - 我们可以很容易地在任何组件中使用它; + 也可以通过让 getter 返回一个函数， - 来实现给 getter 传参, - 在对 store 里的数组进行查询时非常有用; + mapGetters 辅助函数仅仅是将 store 中的 getter 映射到局部计算属性; - 如果想将一个 getter 属性另取一个名字， - 使用对象形式; Mutation + 更改 Vuex 的 store 中的状态的唯一方法是提交 mutation; + Vuex 中的 mutation 非常类似于事件： - 每个 mutation 都有一个字符串的 事件类型 (type), - 一个 回调函数 (handler); + 这个回调函数就是我们实际进行状态更改的地方， - 并且它会接受 state 作为第一个参数; + 你不能直接调用一个 mutation handler。 + 这个选项更像是事件注册：“当触发一个类型为 increment 的 mutation 时，调用此函数。”; - 要唤醒一个 mutation handler， - 你需要以相应的 type 调用 store.commit 方法： + 提交载荷（Payload） + 你可以向 store.commit 传入额外的参数，即 mutation 的 载荷（payload）: - store.commit(&apos;increment&apos;, 10); + 在大多数情况下，载荷应该是一个对象，这样可以包含多个字段并且记录的 mutation 会更易读: - store.commit(&apos;increment&apos;, { amount: 10 }); + 对象风格的提交方式 + 提交 mutation 的另一种方式是直接使用包含 type 属性的对象: - store.commit({ type: &apos;increment&apos;, amount: 10 }); - 当使用对象风格的提交方式，整个对象都作为载荷传给 mutation 函数，因此 handler 保持不变; + Mutation 需遵守 Vue 的响应规则 + 既然 Vuex 的 store 中的状态是响应式的， - 那么当我们变更状态时， - 监视状态的 Vue 组件也会自动更新; + 这也意味着 Vuex 中的 mutation 也需要与使用 Vue 一样遵守一些注意事项: - 最好提前在你的 store 中初始化好所有所需属性。 - 当需要在对象上添加新属性时，你应该 - 使用 Vue.set(obj, &apos;newProp&apos;, 123), - 或者,以新对象替换老对象: state.obj = { ...state.obj, newProp: 123 }; + 使用常量替代 Mutation 事件类型 + 使用常量替代 mutation 事件类型在各种 Flux 实现中是很常见的模式。 - 这样可以使 linter 之类的工具发挥作用， - 同时把这些常量放在单独的文件中可以让你的代码合作者对整个 app 包含的 mutation 一目了然; - &apos;用不用常量取决于你——在需要多人协作的大型项目中，这会很有帮助。但如果你不喜欢，你完全可以不这样做。&apos;; + Mutation 必须是同步函数 - 当 mutation 触发的时候， - 回调函数还没有被调用， - devtools 不知道什么时候回调函数实际上被调用; - &apos;实质上任何在回调函数中进行的的状态的改变都是不可追踪的&apos;; + 在组件中提交 Mutation - 可以在组件中使用 this.$store.commit(&apos;xxx&apos;) 提交 mutation， - 或者使用 mapMutations 辅助函数将组件中的 methods 映射为 store.commit 调用（&apos;需要在根节点注入 store&apos;） Action + Action 类似于 mutation，不同在于： - Action 提交的是 mutation，而不是直接变更状态; - Action 可以包含任意异步操作; + Action 函数接受一个与 store 实例具有相同方法和属性的 context 对象， - 因此可以调用 context.commit 提交一个 mutation， - 或者通过 context.state 和 context.getters 来获取 state 和 getters; - &apos;实践中，我们会经常用到 ES2015 的 参数解构 来简化代码（特别是我们需要调用 commit 很多次的时候); + 分发 Action + Action 通过 store.dispatch 方法触发： - store.dispatch(&apos;increment&apos;); - 在 action 内部执行异步操作; + Actions 支持同样的载荷方式和对象方式进行分发： + 以载荷形式分发: - store.dispatch(&apos;incrementAsync&apos;, { amount: 10 }); + 以对象形式分发: - store.dispatch({ type: &apos;incrementAsync&apos;, amount: 10 }); + 在组件中分发 Action - 你在组件中使用 this.$store.dispatch(&apos;xxx&apos;) 分发 action， - 或者使用 mapActions 辅助函数将组件的 methods 映射为 store.dispatch 调用（需要先在根节点注入 store）; + 组合 Action - Action 通常是异步的， + 首先store.dispatch 可以处理被触发的 action 的处理函数返回的 Promise， - 并且 store.dispatch 仍旧返回 Promise; + 而且我们利用 async / await 这个 JavaScript 即将到来的新特性来组合 action; + 一个 store.dispatch 在不同模块中可以触发多个 action 函数。 - 在这种情况下，只有当所有触发函数完成后， - 返回的 Promise 才会执行。 Module + 由于使用单一状态树， - 应用的所有状态会集中到一个比较大的对象。 - 当应用变得非常复杂时， - store 对象就有可能变得相当臃肿。 + 为了解决以上问题， - Vuex 允许我们将 store 分割成模块（module）。 + 每个模块拥有自己的 state、mutation、action、getter、甚至是嵌套子模块——从上至下进行同样方式的分割: - const moduleA = { state: { ... }, mutations: { ... }, actions: { ... }, getters: { ... }}; - const moduleB = { state: { ... }, mutations: { ... }, actions: { ... }}; - const store = new Vuex.Store({ modules: { a: moduleA, b: moduleB }}); - store.state.a; /* -&gt; moduleA 的状态 */ store.state.b; /* -&gt; moduleB 的状态 */ + 模块的局部状态 - 对于模块内部的 mutation 和 getter， - 接收的第一个参数是模块的局部状态对象。 + 对于模块内部的 action， - 局部状态通过 context.state 暴露出来， - 根节点状态则为 context.rootState; + 对于模块内部的 getter， - 根节点状态会作为第三个参数暴露出来; + 命名空间 + 默认情况下， - 模块内部的 action、mutation 和 getter 是注册在全局命名空间的, - 这样使得多个模块能够对同一 mutation 或 action 作出响应。 + 如果希望你的模块具有更高的封装度和复用性， - 你可以通过添加 namespaced: true 的方式使其成为命名空间模块。 - 当模块被注册后， - 它的所有 getter、action 及 mutation 都会自动根据模块注册的路径调整命名。 + 启用了命名空间的 getter 和 action 会收到局部化的 getter，dispatch 和 commit; - 换言之，你在使用模块内容（module assets）时不需要在同一模块内额外添加空间名前缀; - 更改 namespaced 属性后不需要修改模块内的代码; + 在命名空间模块内访问全局内容（Global Assets） - 如果你希望使用全局 state 和 getter，rootState 和 rootGetter 会作为第三和第四参数传入 getter， - 也会通过 context 对象的属性传入 action。 + 若需要在全局命名空间内分发 action 或提交 mutation， - 将 { root: true } 作为第三参数传给 dispatch 或 commit 即可; + 带命名空间的绑定函数 - 当使用 mapState, mapGetters, mapActions 和 mapMutations 这些函数来绑定命名空间模块时， - 写起来可能比较繁琐; + 对于这种情况， - 你可以将模块的空间名称字符串作为第一个参数传递给上述函数， - 这样所有绑定都会自动将该模块作为上下文; + 你可以通过使用 createNamespacedHelpers创建基于某个命名空间辅助函数; - 它返回一个对象， - 对象里有新的绑定在给定命名空间值上的组件绑定辅助函数; + 给插件开发者的注意事项 - 如果你开发的插件（Plugin）提供了模块并允许用户将其添加到 Vuex store， - 可能需要考虑模块的空间名称问题; - 对于这种情况，你可以通过插件的参数对象来允许用户指定空间名称; + 模块动态注册 - 在 store 创建之后， + 你可以使用 store.registerModule 方法注册模块： - store.registerModule(&apos;myModule&apos;, { /* ... */ }) - store.registerModule([&apos;nested&apos;, &apos;myModule&apos;], { /* ... */ }) - 之后就可以通过 store.state.myModule 和 store.state.nested.myModule 访问模块的状态; + 模块动态注册功能使得其他 Vue 插件可以通过在 store 中附加新模块的方式来使用 Vuex 管理状态; - 例如，vuex-router-sync 插件就是通过动态注册模块将 vue-router 和 vuex 结合在一起， - 实现应用的路由状态管理; + 也可以使用 store.unregisterModule(moduleName) 来动态卸载模块; - 注意，不能使用此方法卸载静态模块（即创建 store 时声明的模块）; + 在注册一个新 module 时， - 你很有可能想保留过去的 state， - 例如从一个服务端渲染的应用保留 state; + 你可以通过 preserveState 选项将其归档： - store.registerModule(&apos;a&apos;, module, { preserveState: true })。 + 模块重用 + 有时我们可能需要创建一个模块的多个实例，例如： - 创建多个 store， + 他们公用同一个模块 - 例如当 runInNewContext 选项是 false 或 &apos;once&apos; 时， - 为了在服务端渲染中避免有状态的单例; + 在一个 store 中多次注册同一个模块; + 如果我们使用一个纯对象来声明模块的状态， - 那么这个状态对象会通过引用被共享， - 导致状态对象被修改时 store 或模块间数据互相污染的问题; + 实际上这和 Vue 组件内的 data 是同样的问题; - 因此解决办法也是相同的——使用一个函数来声明模块状态（仅 2.3.0+ 支持）;","categories":[],"tags":[]},{"title":"Plan-todo-long-time","slug":"Plan-todo-long-time","date":"2017-10-23T09:27:09.000Z","updated":"2017-12-05T12:16:05.883Z","comments":true,"path":"2017/10/23/Plan-todo-long-time/","link":"","permalink":"http://doc2git.com/2017/10/23/Plan-todo-long-time/","excerpt":"","text":"用vue写一个域名出售ui. 狠狠踢自己一脚，每周抽空写一个静态页面； 让git-deployer 项目可以在命令行接受, 仓库用户名;","categories":[],"tags":[]},{"title":"vue深入学习","slug":"Vue单元测试","date":"2017-10-23T08:29:57.982Z","updated":"2017-12-05T12:16:05.883Z","comments":true,"path":"2017/10/23/Vue单元测试/","link":"","permalink":"http://doc2git.com/2017/10/23/Vue单元测试/","excerpt":"","text":"vue实现原理，源码解析（中文）： https://github.com/DMQ/mvvm Vue单元测试：https://cn.vuejs.org/v2/guide/unit-testing.html Actions can return promises (oir rather: always return a Promise),so it should be trivial. You might be interested in this chapter of the documentation, titled “Composing Actions” https://vuex.vuejs.org/en/actions.html#composing-actions https://stackoverflow.com/questions/40165766/returning-promises-from-vuex-actions 阮一峰讲的测试框架mocha: http://www.ruanyifeng.com/blog/2015/12/a-mocha-tutorial-of-examples.html","categories":[],"tags":[]},{"title":"Todo-2017.10-week4","slug":"things_17.10.16-17.10.22","date":"2017-10-23T03:11:20.000Z","updated":"2017-12-05T12:16:05.887Z","comments":true,"path":"2017/10/23/things_17.10.16-17.10.22/","link":"","permalink":"http://doc2git.com/2017/10/23/things_17.10.16-17.10.22/","excerpt":"","text":"完善我的博客中vue便签模块; DONE 让新的便签条目默认显示在最前面； DONE 添加功能: **DONE** 加热(冷文本变热); **DONE** 降温(热文本变冷); **DONE** 移除(移除文本)； DONE 最后一个操作的简要提示功能: **DONE** 监听 *加热* 并显示提示信息； **DONE** 监听 *降温* 并显示提示信息； **DONE** 监听 *移除* 并显示提示信息； 本地搜索 **DONE** 添加本地字符串搜索功能； **DONE** 添加本地正则搜索功能； 开发字典功能 + 开发本地词典UI； + 获取并探索api - 衔接yahoo翻译api; - 衔接金山翻译api; - 衔接百度翻译api; - 打通api和ui交互; + 优化 回滚 添加正反序热切换功能； 添加历史命令回滚功能； 对以上功能进行排版； 让尽可能多的使用该便签，以发并修复现存在的其他问题和需要优化的地方； 理顺该便签页优雅生成静态页面的自动化部署流程，以便部署到 git pages 站点中去； 合并我的博客的 note-dev 分支到 master分支; 尝试将该便签项目移植为 Firefox 插件; 尝试实现： 在产品原型搭建的初期， 使用web组件,如: 1234567891011&lt;head&gt; &lt;link rel=&quot;import&quot; href=&quot;src/new.html&quot;&gt;&lt;/head&gt;&lt;body&gt; ... &lt;/body&gt;&lt;script&gt; var lnk = document.querySelector(&apos;link[rel=&quot;import&quot;]&apos;); var content = link.import; var aDomVariable = content.querySelector(&apos;aSelector&apos;);&lt;/script&gt; 的方式提取我要的部分，进行ui原型预览； 尝试解决的问题：- 避免复制粘贴过程的琐碎； - 避免复制和粘贴后的修改及扩展问题； - 避免样式和css的跨域问题；","categories":[{"name":"plan","slug":"plan","permalink":"http://doc2git.com/categories/plan/"},{"name":"todo","slug":"plan/todo","permalink":"http://doc2git.com/categories/plan/todo/"},{"name":"2017","slug":"plan/todo/2017","permalink":"http://doc2git.com/categories/plan/todo/2017/"}],"tags":[{"name":"plan","slug":"plan","permalink":"http://doc2git.com/tags/plan/"},{"name":"todo","slug":"todo","permalink":"http://doc2git.com/tags/todo/"},{"name":"2017","slug":"2017","permalink":"http://doc2git.com/tags/2017/"}]},{"title":"JS打包工具","slug":"JS打包工具","date":"2017-10-20T07:01:12.000Z","updated":"2017-12-05T12:16:05.883Z","comments":true,"path":"2017/10/20/JS打包工具/","link":"","permalink":"http://doc2git.com/2017/10/20/JS打包工具/","excerpt":"","text":"webpack gulp grunt rollup (es6原生自带)","categories":[],"tags":[]},{"title":"用gitbook写读书笔记 - 从入门到精通 - 链群","slug":"gitbook入坑导读链接","date":"2017-10-20T06:35:46.495Z","updated":"2017-12-05T12:16:05.883Z","comments":true,"path":"2017/10/20/gitbook入坑导读链接/","link":"","permalink":"http://doc2git.com/2017/10/20/gitbook入坑导读链接/","excerpt":"","text":"入门官方资料: 官网：https://www.gitbook.com gitbook help center: https://help.gitbook.com https://developer.gitbook.com/ https://www.gitbook.com/book/ron-liu/a-programmers-reading-nodes/details gitbook 三方资料 加精 zhangjikai：https://gitbook.zhangjikai.com/ chengweiyang：http://www.chengweiyang.cn/gitbook/basic-usage/README.html http://www.chengweiyang.cn/gitbook/ axi295309066@blog.csdn.net：http://blog.csdn.net/axi295309066/article/details/61420694 qq_33689414@blog.csdn.net: http://blog.csdn.net/qq_33689414/article/details/71506654 hopeleft：https://gitbook.hopeleft.com/Usage/Debug.html gitbook 官方编辑器安装 https://github.com/GitbookIO/editor-legacy/releases http://samwhelp.github.io/blog/read/platform/gitbook/editor/index.html 进阶关于gibook命令行工具 npm: https://www.npmjs.com/package/gitbook-cli github: https://github.com/GitbookIO/gitbook-cli yuzeshan: https://yuzeshan.gitbooks.io/gitbook-studying/content/howtouse/gitbookcli.html 加精 zhangjikai：https://gitbook.zhangjikai.com/commands.html gitbook 插件 官方插件库：https://chrisniael.gitbooks.io/gitbook-documentation/content/format/plugins.html zhangjikai： gitbook插件链群：https://gitbook.zhangjikai.com/plugins.html 插件主题：http://www.chengweiyang.cn/gitbook/plugins/theme/comscore.html disqus：http://www.chengweiyang.cn/gitbook/plugins/functional/disqus.html multipart：http://www.chengweiyang.cn/gitbook/plugins/functional/multipart.html toggle-chapters：http://www.chengweiyang.cn/gitbook/plugins/functional/toggle-chapters.html codebeblock-filename：http://www.chengweiyang.cn/gitbook/plugins/functionall/codeblock-filename.html gitbook-plugin-toc2：http://cnodejs.org/topic/575229332420978970d4a5f0 更多插件 … https://chrisniael.gitbooks.io/gitbook-documentation/content/format/plugins.html 主题 zhangjikai： https://gitbook.zhangjikai.com/themes.html book.json案例 zhangjikai： https://gitbook.zhangjikai.com/bookjson.html 读书笔记经典案例 duckduckhack.com： http://docs.duckduckhack.com/ chenshenhai：https://chenshenhai.github.io/koa2-note/note/start/middleware.html jimmylv: https://blog.jimmylv.info/2015-07-22-learning-reactjs/","categories":[],"tags":[]},{"title":"Vue学习参考链接","slug":"Vue学习参考链接","date":"2017-10-20T04:25:08.000Z","updated":"2017-12-05T12:16:05.883Z","comments":true,"path":"2017/10/20/Vue学习参考链接/","link":"","permalink":"http://doc2git.com/2017/10/20/Vue学习参考链接/","excerpt":"","text":"vue官网：http://cn.vuejs.org/v2/guide hn-architecture data state transition props-events lifecycle dom-tree components vue官方demo集: https://cn.vuejs.org/v2/examples/tree-view.html vuex官网：https://vuex.vuejs.org/zh-cn/ vuex数据流 示意图 vuex案例参考： https://github.com/zhufengzhufeng/201704node/tree/533b6b904317aebf1a52d4aefe9115302a1836b8/vue-book/vue-webpack/src-book/vuex https://github.com/zhufengzhufeng/201704node/blob/533b6b904317aebf1a52d4aefe9115302a1836b8/vue-book/vue-webpack/src-vuex/main.js","categories":[],"tags":[]},{"title":"Vue学习参考(无图版)链接","slug":"Vue学习参考(无图版)链接","date":"2017-10-20T04:25:08.000Z","updated":"2017-12-05T12:16:05.883Z","comments":true,"path":"2017/10/20/Vue学习参考(无图版)链接/","link":"","permalink":"http://doc2git.com/2017/10/20/Vue学习参考(无图版)链接/","excerpt":"","text":"vue官网：http://cn.vuejs.org/v2/guidevue官方demo集: https://cn.vuejs.org/v2/examples/tree-view.html vuex官网：https://vuex.vuejs.org/zh-cn/ vuex数据流 示意图 gitbook 版的vue 三方文档：https://ssr.vuejs.org/zh/api.html#webpack-plugins vuex案例参考： https://github.com/zhufengzhufeng/201704node/tree/533b6b904317aebf1a52d4aefe9115302a1836b8/vue-book/vue-webpack/src-book/vuex https://github.com/zhufengzhufeng/201704node/blob/533b6b904317aebf1a52d4aefe9115302a1836b8/vue-book/vue-webpack/src-vuex/main.js","categories":[],"tags":[]},{"title":"salt-test","slug":"salt-test","date":"2017-10-17T09:24:53.000Z","updated":"2017-12-05T12:16:05.887Z","comments":true,"path":"2017/10/17/salt-test/","link":"","permalink":"http://doc2git.com/2017/10/17/salt-test/","excerpt":"","text":"sdf","categories":[{"name":"test","slug":"test","permalink":"http://doc2git.com/categories/test/"},{"name":"salt","slug":"test/salt","permalink":"http://doc2git.com/categories/test/salt/"}],"tags":[{"name":"salt","slug":"salt","permalink":"http://doc2git.com/tags/salt/"},{"name":"test","slug":"test","permalink":"http://doc2git.com/tags/test/"}]},{"title":"关于js对象的深浅复制","slug":"关于js对象的深浅复制","date":"2017-10-17T05:49:44.000Z","updated":"2017-12-05T12:16:05.887Z","comments":true,"path":"2017/10/17/关于js对象的深浅复制/","link":"","permalink":"http://doc2git.com/2017/10/17/关于js对象的深浅复制/","excerpt":"","text":"https://developer.mozilla.org/zh-CN/docs/Web/Guide/API/DOM/The_structured_clone_algorithm","categories":[],"tags":[]},{"title":"firefox插件开发","slug":"firefox插件开发","date":"2017-10-16T17:05:45.992Z","updated":"2017-12-05T12:16:05.883Z","comments":true,"path":"2017/10/17/firefox插件开发/","link":"","permalink":"http://doc2git.com/2017/10/17/firefox插件开发/","excerpt":"","text":"预计参考资料： Firefox扩展开发 （插件开发） Extension开发 入门教程 5步走 五步走： https://link.zhihu.com/?target=http%3A//www.cnblogs.com/kenkofox/archive/2010/05/10/1731557.html Firefox插件（plugins）开发实用指南： https://link.zhihu.com/?target=http%3A//www.crazycpp.com/%3Fp%3D181 Firefox 扩展开发常用工具： https://link.zhihu.com/?target=http%3A//www.crazycpp.com/%3Fp%3D181 我的Firefox插件开发之旅： https://link.zhihu.com/?target=http%3A//www.cppblog.com/epubcn/archive/2008/11/10/66502.html firefox插件Firebug的使用教程firefox插件Firebug的使用教程_javascript技巧： https://link.zhihu.com/?target=http%3A//www.jb51.net/article/21706.htm 目标：较快的成工跑一次 开发firefox插件的流程。项目名：borderify实际尝试开发过程中参考过的资料： https://developer.mozilla.org/zh-CN/Add-ons/WebExtensions/Your_first_WebExtension https://developer.mozilla.org/zh-CN/Add-ons/WebExtensions/Content_scripts https://developer.mozilla.org/zh-CN/Add-ons/WebExtensions/Match_patterns https://developer.mozilla.org/zh-CN/docs/Web/API/Window/postMessage","categories":[],"tags":[]},{"title":"前端静态资源库","slug":"静态资源库","date":"2017-10-15T10:04:36.000Z","updated":"2017-12-05T12:16:05.887Z","comments":true,"path":"2017/10/15/静态资源库/","link":"","permalink":"http://doc2git.com/2017/10/15/静态资源库/","excerpt":"","text":"bootstrap官方全局样式: http://v3.bootcss.com/css/ 前端静态资源库, 首个支持 HTTP/2 的 CDN 服务, 含有多个框架（vue, react, jquery, zipto … ）资源多个版本，和字体库.https://cdn.baomitu.com/ 我的bootstrap静态模板库： http://bootstrap.doc2git.comhttp://bootzee.com/mytemplateshttp://bootzee.com/templates font-awesome: 下载地址： http://fontawesome.io/assets/font-awesome-4.7.0.zipnpm安装： npm i font-awesome –save图标预览本地uri： http://localhost:7787图标预览公网uri： http://fontawesome.io/icons http://ivuex.tech:7787 animate.css: git github: git@github.com:daneden/animate.css.githttp github https://github.com/daneden/animate.css glyphicon: 完整版：http://v3.bootcss.com/components/精简版镜像： http://localhost:7788 图标预览公网uri： https://colorlib.com/polygon/gentelella/glyphicons.html http://icccc.cc:7788 http://ivuex.tech:7788","categories":[],"tags":[]},{"title":"Nginx参考资料链群","slug":"nginx参考资料链群","date":"2017-10-13T04:53:54.000Z","updated":"2017-12-05T12:16:05.887Z","comments":true,"path":"2017/10/13/nginx参考资料链群/","link":"","permalink":"http://doc2git.com/2017/10/13/nginx参考资料链群/","excerpt":"","text":"Nginx反向代理Google： https://blog.linuxeye.cn/399.html Nginx简单转跳和反向代理： https://hack0nair.me/2014-10-25-how-to-setup-reverse-proxy-by-nginx/","categories":[{"name":"nginx","slug":"nginx","permalink":"http://doc2git.com/categories/nginx/"}],"tags":[{"name":"nginx","slug":"nginx","permalink":"http://doc2git.com/tags/nginx/"},{"name":"静态资源","slug":"静态资源","permalink":"http://doc2git.com/tags/静态资源/"},{"name":"转发","slug":"转发","permalink":"http://doc2git.com/tags/转发/"},{"name":"代理","slug":"代理","permalink":"http://doc2git.com/tags/代理/"},{"name":"正向代理","slug":"正向代理","permalink":"http://doc2git.com/tags/正向代理/"},{"name":"反向代理","slug":"反向代理","permalink":"http://doc2git.com/tags/反向代理/"},{"name":"负载均衡","slug":"负载均衡","permalink":"http://doc2git.com/tags/负载均衡/"}]},{"title":"README.md of html-uri--relative2protocal","slug":"README.md of html-url--relative2protocal","date":"2017-10-10T02:52:03.127Z","updated":"2017-12-05T12:16:05.883Z","comments":true,"path":"2017/10/10/README.md of html-url--relative2protocal/","link":"","permalink":"http://doc2git.com/2017/10/10/README.md of html-url--relative2protocal/","excerpt":"","text":"将html中的uri批量智能转换成定制的urn + uri前缀安装:12git clone github.com:doc2git/html-uri--relative2protocal.gitnpm i 使用案例:使用案例一:触发命令：1node replaceInAllHtml.js 关键触发源码(in replaceInAllHtml.js)： 123var replaceRelativeUriToProtocalUriInHtml = require(&apos;./index.js&apos;);var uriReplaceSrcList = require(&apos;./uriReplaceSrcList.js&apos;);replaceRelativeUriToProtocalUriInHtml(&apos;http://localhost:3378/a/b/c/d/e/f/g&apos;, ...uriReplaceSrcList); ‘./uriReplaceSrcList.js’快速生成方式： 1find test-dir -type f | grep &apos;\\index\\.html&apos; &gt; ./uriReplaceSrcList.js ‘./uriReplaceSrcList.js’ 可以是是以下格式的：1234module.exports = [ &apos;/home/doc2git/bootstrap/url-absolute/test-dir/index.html&apos;, &apos;/home/doc2git/bootstrap/url-absolute/test-dir/another.index.html&apos;] 或者：… (你喜欢的导出方式)目前目前版本还没写逐行读入，生成’./uriReplaceSrcList.js’，（因为vim编辑很爽），在稍后的版本中会加入。 使用案例二：触发命令：1find test-dir -type f | grep &apos;\\index.html\\|test\\.html&apos; | xargs node index.js &apos;http://localhost:3354/a/b/c/d/e/f/g/h&apos; 生成的目录结构变更： ) 因为多向 node index.js 传了一个 test.html，‘(… ｜ grep …)’，所以输出多输出了test&lt; 标记名 &gt;.html; 上一行所讲的标记名是可变的：replaceRelativeUriToProtocalUriInHtml 中有如下函数定义.123let defaultFnRenameFileRule = function (inputFilename) &#123; return inputFilename.replace(/\\.html$/, &apos;&apos;) + &apos;-converted&apos; + &apos;.html&apos;; &#125;; 也可以在 案例一 中的 replaceInAllHtml.js 中调用replaceRelativeUriToProtocalUriInHtml时传入添加:1234let defaultFnRenameFileRule = function (inputFilename) &#123; return inputFilename.replace(/\\.html$/, &apos;&apos;) + &apos;-converted&apos; + &apos;.html&apos;; &#125;;replaceRelativeUriToProtocalUriInHtml(uriBase, defaultFnRenameFileRule, ...args); Other functionability: Maybe comming soon …. 如果发现有bug, 欢迎邮箱联系我：doc2git@yahoo.com ; Enjoy it!","categories":[{"name":"工具","slug":"工具","permalink":"http://doc2git.com/categories/工具/"},{"name":"nodejs","slug":"工具/nodejs","permalink":"http://doc2git.com/categories/工具/nodejs/"},{"name":"url","slug":"工具/nodejs/url","permalink":"http://doc2git.com/categories/工具/nodejs/url/"}],"tags":[{"name":"nodejs","slug":"nodejs","permalink":"http://doc2git.com/tags/nodejs/"},{"name":"扒站","slug":"扒站","permalink":"http://doc2git.com/tags/扒站/"},{"name":"uri转换","slug":"uri转换","permalink":"http://doc2git.com/tags/uri转换/"},{"name":"智能替换uri","slug":"智能替换uri","permalink":"http://doc2git.com/tags/智能替换uri/"},{"name":"批量","slug":"批量","permalink":"http://doc2git.com/tags/批量/"},{"name":"一键","slug":"一键","permalink":"http://doc2git.com/tags/一键/"}]},{"title":"firefox开启devtools-html　server的参考资料uri备忘","slug":"firefox开启devtools-html　server的参考资料uri备忘","date":"2017-10-09T05:47:50.378Z","updated":"2017-12-05T12:16:05.883Z","comments":true,"path":"2017/10/09/firefox开启devtools-html　server的参考资料uri备忘/","link":"","permalink":"http://doc2git.com/2017/10/09/firefox开启devtools-html　server的参考资料uri备忘/","excerpt":"","text":"firefox开启devtools-html server的参考资料uri备忘 repo: git@github.com:devtools-html/debugger.html.git issue: https://github.com/devtools-html/debugger.html/issues/1069 解决firefox死循环alert弹窗提示“传入连接”： https://developer.mozilla.org/en-US/docs/Mozilla/Debugging/Debugging_JavaScript","categories":[],"tags":[]},{"title":"Todo-2017.10-week3","slug":"things_17.10.9-17.10.15","date":"2017-10-08T16:00:00.000Z","updated":"2017-12-05T12:16:05.887Z","comments":true,"path":"2017/10/09/things_17.10.9-17.10.15/","link":"","permalink":"http://doc2git.com/2017/10/09/things_17.10.9-17.10.15/","excerpt":"","text":"a-tag-collection 编写一个简单的firefox demo,实现一下功能： 当在任意a标签上右击鼠标时，弹出菜单中有一个我加入的”添加链接信息到数据库”； 为该a标签绑定一个click事件 弹出一个表单，有如下元件： text-input: innerText, href, hostPageUri(宿主页面); button-like: drop, reset, submit; 将该多个a标签的以上text-input中的value存入数据库。 将上一条中存入数据库的a标签信息，简洁的渲染到页面上，简单的样式还是要有的。 为我的blog以优雅的形式添加一个 “Getting Things Done” 单页; DONE 部署在github,码云，码市的我的博客镜像; + DONE 部署本地的三镜像同步; + 用nginx反向代理，原因: - 不用git仓库提供的CNAME api是因为gitee没有提供该api接口； - CNAME会被更新时会被覆盖，不便于同时使用同一版本master一键同步。 到这三个镜像,配置好的可访问域名为: - http://doc2git.com, http://icccc.cc, http://doc2git.com.cn, http://doc2git.club; - http://te.doc2git.com, http://te.icccc.cc, http://te.doc2git.com.cn; - http://co.doc2git.com, http://co.icccc.cc， http://co.doc2git.com.cn - http://hu.doc2git.com， http://hu.icccc.cc; http://hu.doc2git.com.cn; 用vue开发firefox插件，这是一种尝试.+ jquery操作dom那么方便，为什么还用vue? + jquery作为操作dom的最佳实践，我并不排斥; + 我同时兼有: - 自己开发插件的诉求; - 加强vue工程能力的诉求; + 尝试最简单demo预计流程： - 尝试用vue按类名或者标签名获取dom元素 - 如果上一步在实践中不好用,就用原生js获取dom元素,并为该元素添加唯一的不容易重名的id; - 编写vue实例，将vue实例挂载到上述有id的元素上; + 尝试让这种依赖搭配的开发更加优雅，更具通用性； 完成我的blog中 /todo-match-indigo 页面的适配开发。 DONE 把讲vuex简单demo的 vuex2.0 基本使用(2) — mutation 和 action 读完，并且透彻理解。 DONE 在gitee.com注册vue2git账号，并兼容本地设置,开启 http:/vue2git.gitee.io pages 服务,放一组vuex demos上去测试流程跑通. 在vps上部署nginx上部署nginx重定向到vue2git.gitee.io; 意义: 实现vue静态资源的扩展性部署,可自定义url,而只让vps只在客户端没有缓存重定向的情况下转发; 经我测试所知，${user}.gitee.io 与我的vps有 差不多的ping 值, 比${user}.coding.me,${user}.github.io都要快; 充分利用公益资源；","categories":[{"name":"plan","slug":"plan","permalink":"http://doc2git.com/categories/plan/"},{"name":"todo","slug":"plan/todo","permalink":"http://doc2git.com/categories/plan/todo/"},{"name":"2017","slug":"plan/todo/2017","permalink":"http://doc2git.com/categories/plan/todo/2017/"},{"name":"2017.1","slug":"plan/todo/2017/2017-1","permalink":"http://doc2git.com/categories/plan/todo/2017/2017-1/"}],"tags":[{"name":"plan","slug":"plan","permalink":"http://doc2git.com/tags/plan/"},{"name":"todo","slug":"todo","permalink":"http://doc2git.com/tags/todo/"},{"name":"2017","slug":"2017","permalink":"http://doc2git.com/tags/2017/"},{"name":"2017.10 week3","slug":"2017-10-week3","permalink":"http://doc2git.com/tags/2017-10-week3/"}]},{"title":"我的vpn server on ubuntu16 搭建","slug":"我的vpn server on ubuntu16 搭建","date":"2017-10-07T16:57:26.000Z","updated":"2017-12-05T12:16:05.887Z","comments":true,"path":"2017/10/08/我的vpn server on ubuntu16 搭建/","link":"","permalink":"http://doc2git.com/2017/10/08/我的vpn server on ubuntu16 搭建/","excerpt":"","text":"参考链接我的主要参考uri： http://blog.csdn.net/hanshileiai/article/details/49205317 我的次要参考uri： http://www.jianshu.com/p/a8d41e7dfbc6网上讲这个内容的文章比较多，但我就喜欢这两篇，这样已经够了。讲服务端的比较多，我就不原样搬砖了，说一下我以为需要注意的地方. 服务端 关于 /etc/pptpd.conf中localip - 网上有很多教程是说指定为跟客户端统一网段，我这样配置没有成功。 在我的例子中是 应该指定为服务器的外网网卡的局域网ip。 关于开启1723端口 以上主要参考uri链接文中没有详述 其实应该是: 开启gre协议，并打开服务器47,1723号端口。使用VPN需要开启gre协议，而gre协议需要使用服务器的47和1723号端口,具体步骤如下 123sudo iptables -A INPUT -p gre -j ACCEPT sudo iptables -A INPUT -p tcp --dport 1723 -j ACCEPT sudo iptables -A INPUT -p tcp --dport 47 -j ACCEPT 详见我的次要参考链接 http://www.jianshu.com/p/a8d41e7dfbc6 通过参考以上两个链接的参考，结合实际交互，基本能把服务端配置妥当。 我配置服务端修改过得文件： /etc/ppp/pptpd-option /etc/ppp/chap-secrets /etc/pptpd.conf /etc/sysctl.conf /etc/ppp/chap-secrets 行百里路半九十在我的例子中,我的两台客户端pc都是ubuntu16.04，网络接入方式是wifi 客户端从图形界面中调出 网络连接 配置项框； + 配置client vpn连接 实例: - 点击右上角 &apos;新增&apos; - 选择 &apos;以太网&apos; - 选择 &apos;点到点隧道协议（pptp）&apos; - 点击 &apos;新建&apos; - 出现vpn选项表单，依次输入 &apos;网关&apos; ，&apos;vpn server&apos; 中设置的客户 &apos;用户名&apos; 和 &apos;密码&apos; (根据情况选择密码记住或每次询问) - 选择 &apos;高级按钮&apos; - 勾选 &apos;使用点到点加密&apos; - 勾选 &apos;允许有状态的加密&apos; - 勾选 &apos;发送ppp回响包&apos; - 点击 &apos;确定&apos; - 点击 &apos;保存&apos; + 配置client &apos;WI-FI&apos;: - 选中自己要接入的wifi配置实例 - 点击 &apos;编辑&apos; 按钮 - 出现选项卡，当前选中的是 &apos;WI-FI&apos; 栏目 - 选中常规栏目，选择 &apos;使用此连接时自动连接vpn&apos; 选项 - 选择配置好的 &apos;vpn&apos; 项实例 - 根据实际情况决定选择 &apos;所有用户都可以使用这个连接&apos; - 点解 &apos;保存&apos; 按钮 + 收官 - 断开WI-FI连接 - 重新连接该配置好的WI-FI实例 按照这么一路走来，’vpn server 应该时配置好了，如果有点啥出入，问google吧。当然也可以邮箱联系我 doc2git@yahoo.com","categories":[],"tags":[]},{"title":"link:exploering-github","slug":"link:exploering-github","date":"2017-10-07T04:13:08.000Z","updated":"2017-12-05T12:16:05.883Z","comments":true,"path":"2017/10/07/link:exploering-github/","link":"","permalink":"http://doc2git.com/2017/10/07/link:exploering-github/","excerpt":"","text":"bootstrap官网模板uri: https://getbootstrap.com/docs/4.0/examples/ botstrap中型开源模板案例 item: puikinsh/gentelellauri: https://github.com/puikinsh/gentelellafeature: 多后台demo: https://colorlib.com/polygon/gentelella/index.html bootstrap模板群 BlackrockDigital/startbootstrap: https://github.com/BlackrockDigital/startbootstrap https://github.com/iogbole/gentelella_on_railshttps://colorlib.com/polygon/gentelella/index.htmlhttps://github.com/bmcbride/bootleafhttps://github.com/creativetimofficial/light-bootstrap-dashboardhttps://github.com/BlackrockDigital/startbootstrap-simple-sidebarhttps://github.com/search?o=desc&amp;p=2&amp;q=template+bootstrap&amp;s=stars&amp;type=Repositories&amp;utf8=%E2%9C%93https://github.com/search?o=desc&amp;q=template+bootstrap&amp;s=stars&amp;type=Repositories&amp;utf8=%E2%9C%93https://github.com/misterGF/CoPilothttps://github.com/bopoda/acehttps://github.com/puikinsh/Bootstrap-Admin-Templatehttps://github.com/mrholek/CoreUI-Free-Bootstrap-Admin-Templatehttps://github.com/BlackrockDigital/startbootstraphttps://github.com/keen/dashboardshttps://github.com/hatemalimam/primestraphttps://github.com/LotarProject/dokuwiki-template-bootstrap3https://github.com/jumpinjackie/bootstrap-viewer-templatehttps://github.com/puikinsh/gentelellahttps://github.com/search?utf8=%E2%9C%93&amp;q=responsive-iframe-layout-snippet&amp;type=","categories":[],"tags":[]},{"title":"linux词典下载地址","slug":"linux词典下载地址","date":"2017-10-03T00:48:31.066Z","updated":"2017-12-05T12:16:05.883Z","comments":true,"path":"2017/10/03/linux词典下载地址/","link":"","permalink":"http://doc2git.com/2017/10/03/linux词典下载地址/","excerpt":"","text":"linux词典下载地址星际译王中文词典下载： http://download.huzheng.org星际译王中文词典下载： http://download.huzheng.org/zh_CN/","categories":[],"tags":[{"name":"linux","slug":"linux","permalink":"http://doc2git.com/tags/linux/"},{"name":"词典","slug":"词典","permalink":"http://doc2git.com/tags/词典/"},{"name":"翻译","slug":"翻译","permalink":"http://doc2git.com/tags/翻译/"}]},{"title":"webpack1指南","slug":"JavaScript模块化编程的发展历程","date":"2017-10-02T00:18:29.349Z","updated":"2017-12-05T12:16:05.883Z","comments":true,"path":"2017/10/02/JavaScript模块化编程的发展历程/","link":"","permalink":"http://doc2git.com/2017/10/02/JavaScript模块化编程的发展历程/","excerpt":"","text":"webpack1指南： https://www.gitbook.com/book/toobug/webpack-guide虽然webpack1渐渐远去，但有些精巧的小项目是基于webpack1构建的，个人觉得还是有必要熟悉一下。一是为了避免重复早车轮，二是为了深入了解一些经典实现思想（比如《非模块化文件打包》&lt;gh-pages on github支持一个index.html文件,不提供同repo下的资源请求，我目前在摸索快速美观单页repo的高效部署； 又比如《UMD模块打包》，这里面有判断当前宿主js环境规范的经典实现， 编写跨规范js包可以直接拿来用；etc.）。模块化： https://webpack.toobug.net/zh-cn/chapter1/原始时代： https://webpack.toobug.net/zh-cn/chapter1/ancient-times.html命名空间时代： https://webpack.toobug.net/zh-cn/chapter1/name-spacing-age.html模块化时代： https://webpack.toobug.net/zh-cn/chapter1/modular-age.htmlwepack入门： https://webpack.toobug.net/zh-cn/chapter2/入口文件： https://webpack.toobug.net/zh-cn/chapter2/entry-point.html非模块化文件打包：https://webpack.toobug.net/zh-cn/chapter2/non-moduler.htmlAMD模块打包： https://webpack.toobug.net/zh-cn/chapter2/amd.htmlNode模块和NPM： https://webpack.toobug.net/zh-cn/chapter2/node-modules-and-npm.htmlUMD模块打包： https://webpack.toobug.net/zh-cn/chapter2/umd.htmlwebpack进阶： https://webpack.toobug.net/zh-cn/chapter3/CLI与API使用模式： https://webpack.toobug.net/zh-cn/chapter3/cli-api.html基本配置项： https://webpack.toobug.net/zh-cn/chapter3/config.html分片： https://webpack.toobug.net/zh-cn/chapter3/chunks.htmlCommonChuncks插件： https://webpack.toobug.net/zh-cn/chapter3/common-chunks-plugin.html高级配置项： https://webpack.toobug.net/zh-cn/chapter3/advanced-config.htmlLoader使用Loader: https://webpack.toobug.net/zh-cn/chapter4/using-loaders.html常用Loader:bundle-loader: https://webpack.toobug.net/zh-cn/chapter4/bundle-loader.htmlexports-loader: https://webpack.toobug.net/zh-cn/chapter4/exports-loader.htmlimports-loader: https://webpack.toobug.net/zh-cn/chapter4/imports-loader.htmlexpose-loader: https://webpack.toobug.net/zh-cn/chapter4/expose-loader.html杂谈TypeScript和Vue: https://webpack.toobug.net/zh-cn/chapter6/ts-and-vue.html信息提供： https://www.gitbook.com/book/toobug/webpack-guide","categories":[{"name":"gitbook释出","slug":"gitbook释出","permalink":"http://doc2git.com/categories/gitbook释出/"}],"tags":[{"name":"JS模块化编程的发展历程","slug":"JS模块化编程的发展历程","permalink":"http://doc2git.com/tags/JS模块化编程的发展历程/"},{"name":"webpack1， 入门","slug":"webpack1，-入门","permalink":"http://doc2git.com/tags/webpack1，-入门/"},{"name":"进阶","slug":"进阶","permalink":"http://doc2git.com/tags/进阶/"},{"name":"loader","slug":"loader","permalink":"http://doc2git.com/tags/loader/"},{"name":"集成gulp--missed","slug":"集成gulp-missed","permalink":"http://doc2git.com/tags/集成gulp-missed/"},{"name":"jquery引入--missed","slug":"jquery引入-missed","permalink":"http://doc2git.com/tags/jquery引入-missed/"},{"name":"ts","slug":"ts","permalink":"http://doc2git.com/tags/ts/"},{"name":"vue","slug":"vue","permalink":"http://doc2git.com/tags/vue/"}]},{"title":"Todo-2017.10-week2","slug":"things_17.9.18-17.9.24","date":"2017-10-01T16:00:00.000Z","updated":"2017-12-05T12:16:05.887Z","comments":true,"path":"2017/10/02/things_17.9.18-17.9.24/","link":"","permalink":"http://doc2git.com/2017/10/02/things_17.9.18-17.9.24/","excerpt":"","text":"DONE 跟进doc2git.com的审核，并完成其代替换 doc2git.github.io的操作。 DONE 对doc2git.wang进行备案，并设置将其到我的 码市。 DONE 打电话问码云客服，为啥我现在不能push代码更新到码云repo.** 恒创vps 123456789101112**DONE** *doc2git.wang* 解析到 恒创上部署的 *doc2git.wang* 虚拟主机，在其主页中用js重定向到 *gitee.com/doc2git* 。**DONE** 实现定时更新 恒创上部署的 *doc2git.wang* 虚拟主机中的 主页, 让其与 *gitee.com/doc2git* 大致同步，比如一天同步一次, 因为会在window.onload 绑定的函数中重定向到 *gitee.com/doc2git*,所以对同步的要求不高，适当同步即可，这对seo是有相当大影响的。**DONE** 将 *get-bootstrap* 静态项目部署到恒创vps上，使用nginx代理。规划在恒创vps上建立js,css,images静态资源站，以供doc2git.github.io, gitee.com/doc2git/，bootzee.com/mytemplates 由三方提供的由我开发并维护的页面等使用。 html-uri–relative2protocal 12- 实现 uriReplaceSrcList.js 中数组的一键 生成, 或者自动生成。- 完成 纯粹nodejs代码和命令行使用方式，以及&quot;uriReplaceSrcList.js 中导入数组的一键 生成, 或者自动生成&quot;的文档撰写。 DONE 脚本化实现快速同步github,码云,本地版本同步. 12**DONE** 本地git--bare库的创建;**DONE** github,码云,本地版本 三个uri添加到 git remote all 命令队列中; repo中的双镜像处理 12**DONE** 在我的hexo博客中将所有doc2git.com字符串改为doc2git.com；在我在线及离线项目中添加doc2git.com，以及对应项目的码云镜像; DONE 让 git@github.com:doc2git/git-deployer 更便于使用. 12345678+ 为以上项目简单写写README.md;+ 向宿主目录（git-deployer的上一级目录）中的 .gitignore文件中加入该项目文件名；+ Bug: - 当本地分支不存在，但是remote映射all存在时,会报错：fatal: 远程 all 已经存在； - 需要尝试（尝试用git rebase）删除本地和远程repo中， 带有myreponsitory（应为myrepository）字样的版本， 这会导致前版本升级到新版本时，运行中出现报错： &apos;mkdir: 无法创建目录&quot;/home/myrepository/doc2git-bashrc.git&quot;: 没有那个文件或目录&apos;; DONE 参照 firefox插件开发 写个最简单的firefox插件 hello, world.","categories":[{"name":"plan","slug":"plan","permalink":"http://doc2git.com/categories/plan/"},{"name":"todo","slug":"plan/todo","permalink":"http://doc2git.com/categories/plan/todo/"},{"name":"2017","slug":"plan/todo/2017","permalink":"http://doc2git.com/categories/plan/todo/2017/"}],"tags":[{"name":"plan","slug":"plan","permalink":"http://doc2git.com/tags/plan/"},{"name":"todo","slug":"todo","permalink":"http://doc2git.com/tags/todo/"},{"name":"2017","slug":"2017","permalink":"http://doc2git.com/tags/2017/"},{"name":"week2","slug":"week2","permalink":"http://doc2git.com/tags/week2/"}]},{"title":"开源实时服务器deepstream.io","slug":"开源实时服务器deepstream.io","date":"2017-10-01T04:44:11.939Z","updated":"2017-12-05T12:16:05.887Z","comments":true,"path":"2017/10/01/开源实时服务器deepstream.io/","link":"","permalink":"http://doc2git.com/2017/10/01/开源实时服务器deepstream.io/","excerpt":"","text":"参考链接：https://deepstreamhub.com/tutorials/getting-started/javascript/?iohttps://www.infoq.com/news/2016/07/deepstream-real-time-serverhttp://www.jianshu.com/p/8dc7bae43d3e","categories":[],"tags":[{"name":"开源","slug":"开源","permalink":"http://doc2git.com/tags/开源/"},{"name":"实时服务器","slug":"实时服务器","permalink":"http://doc2git.com/tags/实时服务器/"},{"name":"deepstream.io","slug":"deepstream-io","permalink":"http://doc2git.com/tags/deepstream-io/"}]},{"title":"Hello World","slug":"hello-world","date":"2017-09-30T07:14:51.000Z","updated":"2017-12-05T12:16:05.883Z","comments":true,"path":"2017/09/30/hello-world/","link":"","permalink":"http://doc2git.com/2017/09/30/hello-world/","excerpt":"","text":"title: Hello WorldWelcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new \"My New Post\" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment","categories":[],"tags":[{"name":"tutor","slug":"tutor","permalink":"http://doc2git.com/tags/tutor/"},{"name":"hexo","slug":"hexo","permalink":"http://doc2git.com/tags/hexo/"}]},{"title":"any-cgi-script--nginx--ubuntu16","slug":"enable-any-cgi-script-nginx-ubuntu16","date":"2017-09-30T07:04:47.000Z","updated":"2017-12-05T12:16:05.883Z","comments":true,"path":"2017/09/30/enable-any-cgi-script-nginx-ubuntu16/","link":"","permalink":"http://doc2git.com/2017/09/30/enable-any-cgi-script-nginx-ubuntu16/","excerpt":"","text":"title: any-cgi-script–nginx–ubuntu16date: 2017-09-30 15:04:47 tags: [torake, ubuntu, linux, cgi, nginx, automatice]配置过程： 基于nginx和ubuntu的任意类型脚本的CGI支持http://xfeng.me/nginx-support-fcgi/https://askubuntu.com/questions/264053/how-to-install-c-fastcgi-development-libraryhttps://answers.launchpad.net/esys-particle/+question/365307http://www.jb51.net/article/106375.htm","categories":[],"tags":[{"name":"torake","slug":"torake","permalink":"http://doc2git.com/tags/torake/"},{"name":"ubuntu","slug":"ubuntu","permalink":"http://doc2git.com/tags/ubuntu/"},{"name":"linux","slug":"linux","permalink":"http://doc2git.com/tags/linux/"},{"name":"cgi","slug":"cgi","permalink":"http://doc2git.com/tags/cgi/"},{"name":"nginx","slug":"nginx","permalink":"http://doc2git.com/tags/nginx/"},{"name":"automatice","slug":"automatice","permalink":"http://doc2git.com/tags/automatice/"}]},{"title":"两个有趣的移动端项目 - 链接","slug":"给小黄的链接","date":"2017-09-28T08:56:08.000Z","updated":"2017-12-05T12:16:05.887Z","comments":true,"path":"2017/09/28/给小黄的链接/","link":"","permalink":"http://doc2git.com/2017/09/28/给小黄的链接/","excerpt":"","text":"vue书城： https://github.com/zhufengzhufeng/201704node/tree/master/vue-book/vue-webpackreact跑马灯： https://github.com/zhufengnodejs/zhufengketang-react","categories":[],"tags":[]},{"title":"CSS,font-family,好看常用的中文字体","slug":"css-font-family","date":"2017-09-27T13:34:37.000Z","updated":"2017-12-05T12:16:05.883Z","comments":true,"path":"2017/09/27/css-font-family/","link":"","permalink":"http://doc2git.com/2017/09/27/css-font-family/","excerpt":"","text":"CSS,font-family,好看常用的中文字体 例1（小米米官网）：font-family: “Arial”,”Microsoft YaHei”,”黑体”,”宋体”,sans-serif; 例2（淘宝技术研发中心）：font: 12px/1.5 Tahoma,Helvetica,Arial,’宋体’,sans-serif; 例3（加网 ）：font: 14px/1.5 ‘Microsoft YaHei’,arial,tahoma,\\5b8b\\4f53,sans-serif; 例4（淘宝UED）：font: 12px/1 Tahoma,Helvetica,Arial,”\\5b8b\\4f53”,sans-serif; 例5（一淘UX）:font-family: Helvetica, ‘Hiragino Sans GB’, ‘Microsoft Yahei’, ‘微软雅黑’, Arial, sans-serif; font: 12px/1 Tahoma,Helvetica,Arial,”\\5b8b\\4f53”,sans-serif; 另外： HTML，CSS，font-family：中文字体的英文名称 宋体 SimSun 黑体 SimHei 微软雅黑 Microsoft YaHei 微软正黑体 Microsoft JhengHei 新宋体 NSimSun 新细明体 PMingLiU 细明体 MingLiU 标楷体 DFKai-SB 仿宋 FangSong 楷体 KaiTi 仿宋_GB2312 FangSong_GB2312 楷体_GB2312 KaiTi_GB2312 宋体：SimSuncss中中文字体（font-family）的英文名称 Mac OS的一些： 华文细黑：STHeiti Light [STXihei] 华文黑体：STHeiti 华文楷体：STKaiti 华文宋体：STSong 华文仿宋：STFangsong 儷黑 Pro：LiHei Pro Medium 儷宋 Pro：LiSong Pro Light 標楷體：BiauKai 蘋果儷中黑：Apple LiGothic Medium 蘋果儷細宋：Apple LiSung Light Windows的一些： 新細明體：PMingLiU 細明體：MingLiU 標楷體：DFKai-SB 黑体：SimHei 新宋体：NSimSun 仿宋：FangSong 楷体：KaiTi 仿宋_GB2312：FangSong_GB2312 楷体_GB2312：KaiTi_GB2312 微軟正黑體：Microsoft JhengHei 微软雅黑体：Microsoft YaHei 装Office会生出来的一些： 隶书：LiSu 幼圆：YouYuan 华文细黑：STXihei 华文楷体：STKaiti 华文宋体：STSong 华文中宋：STZhongsong 华文仿宋：STFangsong 方正舒体：FZShuTi 方正姚体：FZYaoti 华文彩云：STCaiyun 华文琥珀：STHupo 华文隶书：STLiti 华文行楷：STXingkai 华文新魏：STXinwei Windows 中的中文字体。 在默认情况下，也就是未自行安装新字体或者 Office 等文字处理软件的情况下，Windows 默认提供下列字体： Windows 95/98/98SE 宋体、黑体、楷体_GB2312、仿宋_GB2312 Windows XP/2000/2003/ME/NT 宋体/新宋体、黑体、楷体_GB2312、仿宋_GB2312 (Windows XP SP3 宋体-PUA) Windows Vista/7/2008 宋体/新宋体、黑体、楷体、仿宋、微软雅黑、SimSun-ExtB 那么每种字体能显示那些汉字呢？ Vista 之前的 Windows 中宋体/新宋体、黑体支持 GBK 1.0 字符集， 楷体_GB2312、仿宋_GB2312 支持 GB2312-80 字符集。 （注：Windows 3.X 只能支持 GB2312-80 字符集） Vista 及之后的 Windows 中宋体/新宋体、黑体、楷体、仿宋、微软雅黑支持 GB18030-2000 字符集， SimSun-ExtB 只支持 GB18030-2005 字符集扩展 B 部分。 下面对字符集进行简单的介绍： GB2312-80 &lt; GBK 1.0 &lt; GB18030-2000 &lt; GB18030-2005 GB2312-80 中的字符数量最少，GB18030-2005 字符数量最多。 GB2312-80 是最早的版本，字符数比较少； GBK 1.0 中的汉字大致与 Unicode 1.1 中的汉字数量相同； GB18030-2000 中的汉字大致与 Unicode 3.0 中的汉字数量相同，主要增加了扩展 A 部分； GB18030-2005 中的汉字大致与 Unicode 4.1 中的汉字数量相同，主要增加了扩展 B 部分； 由于 Unicode 5.2 的发布，估计 GB18030 会在近期发布新版本，增加扩展 C 部分。 需要说明的是在 GB18030 中扩展 B 部分并不是强制标准。 如果想查看 GB18030 的标准文本，请访问 http://www.gb168.cn 中的强标阅读。 如果想了解 Unicode 的内容，请访问 http://www.unicode.org。 现在纠正网上普遍的一个错误： GB18030-2000 和 GB18030-2005 都不支持单字节的欧元符号 与简体中文有关的代吗页如下： 936 gb2312 简体中文(GB2312)————其实是GBK 10008 x-mac-chinesesimp 简体中文(Mac) 20936 x-cp20936 简体中文(GB2312-80) 50227 x-cp50227 简体中文(ISO-2022) 51936 EUC-CN 简体中文(EUC) 52936 hz-gb-2312 简体中文(HZ) 54936 GB18030 简体中文(GB18030) 补充： 使用楷体_GB2312、仿宋_GB2312后，在 Windows 7/Vista/2008 中可能不再显示为对应的字体。 这是因为 Windows 7/Vista/2008 中有楷体、仿宋，默认情况下没有楷体_GB2312、仿宋_GB2312，字体名称相差“_GB2312”。","categories":[],"tags":[{"name":"CSS","slug":"CSS","permalink":"http://doc2git.com/tags/CSS/"},{"name":"font-family","slug":"font-family","permalink":"http://doc2git.com/tags/font-family/"},{"name":"好看常用的中文字体","slug":"好看常用的中文字体","permalink":"http://doc2git.com/tags/好看常用的中文字体/"}]},{"title":"font-icon","slug":"font-icon-md","date":"2017-09-27T13:06:45.000Z","updated":"2017-12-05T12:16:05.883Z","comments":true,"path":"2017/09/27/font-icon-md/","link":"","permalink":"http://doc2git.com/2017/09/27/font-icon-md/","excerpt":"","text":"title: font-icon.mddate: 2017-09-27 21:06:45 tags: [font-icon, Glyphicon, 字体图标, icon, src, icon-src]font awesomeurl: https://getbootstrap.com/docs/3.3/components/ font awesomefont awesome bootstrap Glyphiconsurl: https://getbootstrap.com/docs/3.3/components/ bootstrap Glyphiconsbootstrap Glyphicons 阿里巴巴矢量图标库url: http://www.iconfont.cn/collections 阿里巴巴矢量图标库阿里巴巴矢量图标库","categories":[],"tags":[{"name":"font-icon","slug":"font-icon","permalink":"http://doc2git.com/tags/font-icon/"},{"name":"Glyphicon","slug":"Glyphicon","permalink":"http://doc2git.com/tags/Glyphicon/"},{"name":"字体图标","slug":"字体图标","permalink":"http://doc2git.com/tags/字体图标/"},{"name":"icon","slug":"icon","permalink":"http://doc2git.com/tags/icon/"},{"name":"src","slug":"src","permalink":"http://doc2git.com/tags/src/"},{"name":"icon-src","slug":"icon-src","permalink":"http://doc2git.com/tags/icon-src/"}]},{"title":"crawl 爬虫","slug":"crawl","date":"2017-09-27T12:33:29.000Z","updated":"2017-12-05T12:16:05.883Z","comments":true,"path":"2017/09/27/crawl/","link":"","permalink":"http://doc2git.com/2017/09/27/crawl/","excerpt":"","text":"title: crawl 爬虫date: 2017-09-27 20:33:29 tags: [crawl, 爬虫]用到了 request iconv-lite cheerio debug async express mongoose ejs cron 等js模块；实现了目标DOM元素获取。 node 爬虫url: https://github.com/doc2git/201704crawl node 爬虫目标DOM元素获取 强大的傻瓜式wget爬虫命令： 我用得最早，用得最多的wget爬虫命令： wget –mirror –convert-links http://example.com http://pkuwwt.github.io/linux/2015-09-26-all-the-wget-commands-you-should-know 我2017年10月最喜欢的命令： 爬取制定页面及应用资源：12wget -page-requisites --span-hosts --convert-links --adjust-extension http://example.com/dir/filewget -p -H -k -E http://example.com/dir/file","categories":[],"tags":[{"name":"crawl","slug":"crawl","permalink":"http://doc2git.com/tags/crawl/"},{"name":"爬虫","slug":"爬虫","permalink":"http://doc2git.com/tags/爬虫/"}]},{"title":"resources-for-bootstrap","slug":"resources-for-bootstrap","date":"2017-09-27T08:59:45.000Z","updated":"2017-12-05T12:16:05.887Z","comments":true,"path":"2017/09/27/resources-for-bootstrap/","link":"","permalink":"http://doc2git.com/2017/09/27/resources-for-bootstrap/","excerpt":"","text":"for bootstrap3: This is headers for bootstrap3:url: https://getbootstrap.com/docs/3.3/getting-started/ [Getting started, for bootstrap3],bootstrap3 Bootstrap 4 Beta is here! for bootstrap4:url: https://v4-alpha.getbootstrap.com/components/navbar/ [Getting started, for bootstrap3],bootstrap3","categories":[],"tags":[{"name":"bootstrap","slug":"bootstrap","permalink":"http://doc2git.com/tags/bootstrap/"},{"name":"ui-src","slug":"ui-src","permalink":"http://doc2git.com/tags/ui-src/"},{"name":"template","slug":"template","permalink":"http://doc2git.com/tags/template/"},{"name":"demoes","slug":"demoes","permalink":"http://doc2git.com/tags/demoes/"},{"name":"link","slug":"link","permalink":"http://doc2git.com/tags/link/"}]},{"title":"howto-hexo","slug":"howto-hexo","date":"2017-09-27T05:02:07.000Z","updated":"2017-12-05T12:16:05.883Z","comments":true,"path":"2017/09/27/howto-hexo/","link":"","permalink":"http://doc2git.com/2017/09/27/howto-hexo/","excerpt":"","text":"title: howto-hexodate: 2017-09-27 13:02:07 tags: [hexo, turtor]hexo中文官网 hexo中使用模板 hexo中的使用辅助函数 强调: 不能在源文件中使用辅助函数；","categories":[],"tags":[{"name":"hexo","slug":"hexo","permalink":"http://doc2git.com/tags/hexo/"},{"name":"turtor","slug":"turtor","permalink":"http://doc2git.com/tags/turtor/"}]},{"title":"vim-config-for-rails-developement","slug":"vim-config-for-rails-developement","date":"2017-09-27T02:46:13.000Z","updated":"2017-12-05T12:16:05.887Z","comments":true,"path":"2017/09/27/vim-config-for-rails-developement/","link":"","permalink":"http://doc2git.com/2017/09/27/vim-config-for-rails-developement/","excerpt":"","text":"Follow jianjiss.com to quickly create rails development:Walkthrough of my .vimrc file for Ruby development How to manger vim plugins by vundle.vim?vundle.vim","categories":[],"tags":[{"name":"try","slug":"try","permalink":"http://doc2git.com/tags/try/"},{"name":"vim","slug":"vim","permalink":"http://doc2git.com/tags/vim/"},{"name":"rails","slug":"rails","permalink":"http://doc2git.com/tags/rails/"},{"name":"ruby","slug":"ruby","permalink":"http://doc2git.com/tags/ruby/"},{"name":"development","slug":"development","permalink":"http://doc2git.com/tags/development/"}]},{"title":"test-js-2","slug":"test-js-2","date":"2017-09-26T02:20:59.000Z","updated":"2017-12-05T12:16:05.887Z","comments":true,"path":"2017/09/26/test-js-2/","link":"","permalink":"http://doc2git.com/2017/09/26/test-js-2/","excerpt":"","text":"can the js run normal?","categories":[],"tags":[{"name":"test","slug":"test","permalink":"http://doc2git.com/tags/test/"},{"name":"try","slug":"try","permalink":"http://doc2git.com/tags/try/"},{"name":"why","slug":"why","permalink":"http://doc2git.com/tags/why/"}]},{"title":"test-js","slug":"test-js","date":"2017-09-25T16:23:00.000Z","updated":"2017-12-05T12:16:05.887Z","comments":true,"path":"2017/09/26/test-js/","link":"","permalink":"http://doc2git.com/2017/09/26/test-js/","excerpt":"","text":"测试能否正常运行javascript代码 var jsonImg = document.createElement('img'); jsonImg.src = ''; jsonImg.src = 'http://doc2git.com/json-str-for-main-item/'; jsonImg.onload = function(){ //console.log(123); console.log(jsonImg.src); } console.log(document.querySelector('iframe')); console.log('try console.log()'); alert('type alert');","categories":[],"tags":[{"name":"test","slug":"test","permalink":"http://doc2git.com/tags/test/"},{"name":"try","slug":"try","permalink":"http://doc2git.com/tags/try/"},{"name":"js","slug":"js","permalink":"http://doc2git.com/tags/js/"},{"name":"brave","slug":"brave","permalink":"http://doc2git.com/tags/brave/"}]},{"title":"来来来，欢快的写UI，立刻view渲染！","slug":"来来来，欢快的写UI，立刻view渲染！","date":"2017-09-02T14:12:53.000Z","updated":"2017-12-05T12:16:05.887Z","comments":true,"path":"2017/09/02/来来来，欢快的写UI，立刻view渲染！/","link":"","permalink":"http://doc2git.com/2017/09/02/来来来，欢快的写UI，立刻view渲染！/","excerpt":"","text":"在线编辑UI，即刻预览: Version 1: link: http://doc2git.com/edit-code-view--pad/ state: 只是修复bug，基本上不加新功能 inspiration: Any html render 特性: 文本框输入什么（html），显示框就渲染什么(html)。 Version 2: link: http://doc2git.com/source--hack--view/ state: 正在利用闲余时间开发中 view-intention: Vue 特性: 文本框输入什么（html），显示框就渲染什么(html)。 左侧iframe头部导航栏有键入uri, 转跳键入的ｕri, 浏览历史倒退和前进功能。 可能会实现: 第一屏尽可能多地用来显示干货内容 navbar当左侧阅读源iframe的上边缘的style.top大于触碰到顶部导航条显示高度时，隐藏该顶部导航条;当左侧阅读源iframe的上边缘的style.top小于于触碰到顶部导航条显示高度时，现实该顶部导航条; footer默认隐藏footer, footer将在暂时未定的某个滚动条s滚动到底部时显示；footer将在暂时未定的某个滚动条s滚离底部高度ｙ时隐藏滚动条； 考虑左边代码区域的渲染触发按钮能否优雅地放到接近或浮动与渲染输出区域的xy位置 加入可选的vim操作键功能 Version 3: link: git@github.com:doc2git/inspiration-responsive-view.git state: 进入开发期 inspiration: boostrap 构想: 上面是能让bootstrap，960等响应式设计开发独占全部屏幕的区域。 考虑一个比优雅的实现方式，实现上边页面单独出现html/css调试控制面板 下面左边是参考源（设计图，实践较好的代码，或者ui界面）。 关于尺寸的问题，用transform:scale(arg)或者类似的css属性来处理,使得该区域占较少的屏幕尺寸。 下面右边是实际的编码区,尝试确保阅读方便。 输入便捷的问题，通过引用CodeMirror的vim模块实现。","categories":[{"name":"工具","slug":"工具","permalink":"http://doc2git.com/categories/工具/"},{"name":"UI代码","slug":"工具/UI代码","permalink":"http://doc2git.com/categories/工具/UI代码/"},{"name":"便捷测试","slug":"工具/UI代码/便捷测试","permalink":"http://doc2git.com/categories/工具/UI代码/便捷测试/"}],"tags":[{"name":"在线编辑UI","slug":"在线编辑UI","permalink":"http://doc2git.com/tags/在线编辑UI/"},{"name":"即刻预览","slug":"即刻预览","permalink":"http://doc2git.com/tags/即刻预览/"},{"name":"交互","slug":"交互","permalink":"http://doc2git.com/tags/交互/"},{"name":"便捷测试","slug":"便捷测试","permalink":"http://doc2git.com/tags/便捷测试/"},{"name":"文档学习","slug":"文档学习","permalink":"http://doc2git.com/tags/文档学习/"},{"name":"教程学习","slug":"教程学习","permalink":"http://doc2git.com/tags/教程学习/"},{"name":"iframe跳转","slug":"iframe跳转","permalink":"http://doc2git.com/tags/iframe跳转/"},{"name":"iframe历史","slug":"iframe历史","permalink":"http://doc2git.com/tags/iframe历史/"},{"name":"工具","slug":"工具","permalink":"http://doc2git.com/tags/工具/"},{"name":"灵感","slug":"灵感","permalink":"http://doc2git.com/tags/灵感/"}]},{"title":"开始使用","slug":"hexo-editor-开始使用","date":"2016-06-20T12:47:46.000Z","updated":"2017-12-05T12:16:05.883Z","comments":true,"path":"2016/06/20/hexo-editor-开始使用/","link":"","permalink":"http://doc2git.com/2016/06/20/hexo-editor-开始使用/","excerpt":"","text":"安装依赖 Node.js v4.0+ Git 下载1git clone https://github.com/tajpure/hexo-editor.git 初始化进入hexo-editor目录，执行1npm install --production 配置_config.yml_config.yml位于hexo-editor根目录，提供了一些简单的配置选项给用户设置。 设置环境 如果在桌面环境使用，将local改为true，此时无需登录即可使用。 如果部署在服务器，请使用local的默认值false，此时需要配置用户名和密码。 设置用户名和密码 如果在桌面环境使用，请忽略此配置 将要使用的用户名和密码依次填到username和password中，请不要使用默认值。 设置博客目录(使用绝对路径)将hexo博客的目录路径配置到base_dir, 例:如果你的博客目录为”/home/user/blog”，则将base_dir设为该地址。 如果需要使用hexo-editor提供的deploy功能，你需要设好hexo的deploy配置，并添加你的ssh key至deploy服务器的authorized_keys。使其不用密码即可deploy。 设置端口默认端口为2048，如果想自定义端口，直接修改即可。 启动1npm start","categories":[{"name":"文档","slug":"文档","permalink":"http://doc2git.com/categories/文档/"}],"tags":[{"name":"hexo","slug":"hexo","permalink":"http://doc2git.com/tags/hexo/"},{"name":"editor","slug":"editor","permalink":"http://doc2git.com/tags/editor/"},{"name":"markdown","slug":"markdown","permalink":"http://doc2git.com/tags/markdown/"}]},{"title":"Getting Started","slug":"hexo-editor-Getting-Started","date":"2016-06-20T12:43:49.000Z","updated":"2017-12-05T12:16:05.883Z","comments":true,"path":"2016/06/20/hexo-editor-Getting-Started/","link":"","permalink":"http://doc2git.com/2016/06/20/hexo-editor-Getting-Started/","excerpt":"","text":"Dependencies Node.js v4.0+ Git How to Get Hexo Editor?1git clone https://github.com/tajpure/hexo-editor.git Initialization12cd hexo-editornpm install --production ConfigurationYou can change these variables in _config.yml for configuration. local If you use it in desktop, change the “local” to be true, and then you can use it without login. If deploy it on server, please use the default value “false”. You will need to authorize. username &amp; password If you use it in desktop, please skip this step. Please use your own username and password, Do not use the defaults. base_dir(absolute path)Set your hexo blog directory to the “base_dir”. If you need to deploy a hexo blog, you should add the SSH key to the authorized_keys of the target machine. portThe default port of Hexo Editor is 2048 start1npm start","categories":[{"name":"docs","slug":"docs","permalink":"http://doc2git.com/categories/docs/"}],"tags":[{"name":"hexo","slug":"hexo","permalink":"http://doc2git.com/tags/hexo/"},{"name":"editor","slug":"editor","permalink":"http://doc2git.com/tags/editor/"},{"name":"markdown","slug":"markdown","permalink":"http://doc2git.com/tags/markdown/"}]}]}